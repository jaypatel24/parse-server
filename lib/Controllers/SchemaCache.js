"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _cryptoUtils = require("../cryptoUtils");

var _defaults = require("../defaults");

var _defaults2 = _interopRequireDefault(_defaults);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const MAIN_SCHEMA = "__MAIN_SCHEMA";
const SCHEMA_CACHE_PREFIX = "__SCHEMA";
const ALL_KEYS = "__ALL_KEYS";

class SchemaCache {

  constructor(cacheController, ttl = _defaults2.default.schemaCacheTTL, singleCache = false) {
    this.ttl = ttl;
    if (typeof ttl == 'string') {
      this.ttl = parseInt(ttl);
    }
    this.cache = cacheController;
    this.prefix = SCHEMA_CACHE_PREFIX;
    if (!singleCache) {
      this.prefix += (0, _cryptoUtils.randomString)(20);
    }
  }

  put(key, value) {
    return this.cache.get(this.prefix + ALL_KEYS).then(allKeys => {
      allKeys = allKeys || {};
      allKeys[key] = true;
      return Promise.all([this.cache.put(this.prefix + ALL_KEYS, allKeys, this.ttl), this.cache.put(key, value, this.ttl)]);
    });
  }

  getAllClasses() {
    if (!this.ttl) {
      return Promise.resolve(null);
    }
    return this.cache.get(this.prefix + MAIN_SCHEMA);
  }

  setAllClasses(schema) {
    if (!this.ttl) {
      return Promise.resolve(null);
    }
    return this.put(this.prefix + MAIN_SCHEMA, schema);
  }

  setOneSchema(className, schema) {
    if (!this.ttl) {
      return Promise.resolve(null);
    }
    return this.put(this.prefix + className, schema);
  }

  getOneSchema(className) {
    if (!this.ttl) {
      return Promise.resolve(null);
    }
    return this.cache.get(this.prefix + className).then(schema => {
      if (schema) {
        return Promise.resolve(schema);
      }
      return this.cache.get(this.prefix + MAIN_SCHEMA).then(cachedSchemas => {
        cachedSchemas = cachedSchemas || [];
        schema = cachedSchemas.find(cachedSchema => {
          return cachedSchema.className === className;
        });
        if (schema) {
          return Promise.resolve(schema);
        }
        return Promise.resolve(null);
      });
    });
  }

  clear() {
    // That clears all caches...
    return this.cache.get(this.prefix + ALL_KEYS).then(allKeys => {
      if (!allKeys) {
        return;
      }
      const promises = Object.keys(allKeys).map(key => {
        return this.cache.del(key);
      });
      return Promise.all(promises);
    });
  }
}
exports.default = SchemaCache;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Db250cm9sbGVycy9TY2hlbWFDYWNoZS5qcyJdLCJuYW1lcyI6WyJNQUlOX1NDSEVNQSIsIlNDSEVNQV9DQUNIRV9QUkVGSVgiLCJBTExfS0VZUyIsIlNjaGVtYUNhY2hlIiwiY29uc3RydWN0b3IiLCJjYWNoZUNvbnRyb2xsZXIiLCJ0dGwiLCJzY2hlbWFDYWNoZVRUTCIsInNpbmdsZUNhY2hlIiwicGFyc2VJbnQiLCJjYWNoZSIsInByZWZpeCIsInB1dCIsImtleSIsInZhbHVlIiwiZ2V0IiwidGhlbiIsImFsbEtleXMiLCJQcm9taXNlIiwiYWxsIiwiZ2V0QWxsQ2xhc3NlcyIsInJlc29sdmUiLCJzZXRBbGxDbGFzc2VzIiwic2NoZW1hIiwic2V0T25lU2NoZW1hIiwiY2xhc3NOYW1lIiwiZ2V0T25lU2NoZW1hIiwiY2FjaGVkU2NoZW1hcyIsImZpbmQiLCJjYWNoZWRTY2hlbWEiLCJjbGVhciIsInByb21pc2VzIiwiT2JqZWN0Iiwia2V5cyIsIm1hcCIsImRlbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBSUE7O0FBQ0E7Ozs7OztBQUxBLE1BQU1BLGNBQWMsZUFBcEI7QUFDQSxNQUFNQyxzQkFBc0IsVUFBNUI7QUFDQSxNQUFNQyxXQUFXLFlBQWpCOztBQUtlLE1BQU1DLFdBQU4sQ0FBa0I7O0FBRy9CQyxjQUFZQyxlQUFaLEVBQTZCQyxNQUFNLG1CQUFTQyxjQUE1QyxFQUE0REMsY0FBYyxLQUExRSxFQUFpRjtBQUMvRSxTQUFLRixHQUFMLEdBQVdBLEdBQVg7QUFDQSxRQUFJLE9BQU9BLEdBQVAsSUFBYyxRQUFsQixFQUE0QjtBQUMxQixXQUFLQSxHQUFMLEdBQVdHLFNBQVNILEdBQVQsQ0FBWDtBQUNEO0FBQ0QsU0FBS0ksS0FBTCxHQUFhTCxlQUFiO0FBQ0EsU0FBS00sTUFBTCxHQUFjVixtQkFBZDtBQUNBLFFBQUksQ0FBQ08sV0FBTCxFQUFrQjtBQUNoQixXQUFLRyxNQUFMLElBQWUsK0JBQWEsRUFBYixDQUFmO0FBQ0Q7QUFD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Q0FBUDtBQUNELE9BRmdCLENBQWpCO0FBR0EsYUFBT0ssUUFBUUMsR0FBUixDQUFZWSxRQUFaLENBQVA7QUFDRCxLQVJNLENBQVA7QUFTRDtBQTVFOEI7a0JBQVo1QixXIiwiZmlsZSI6IlNjaGVtYUNhY2hlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgTUFJTl9TQ0hFTUEgPSBcIl9fTUFJTl9TQ0hFTUFcIjtcbmNvbnN0IFNDSEVNQV9DQUNIRV9QUkVGSVggPSBcIl9fU0NIRU1BXCI7XG5jb25zdCBBTExfS0VZUyA9IFwiX19BTExfS0VZU1wiO1xuXG5pbXBvcnQgeyByYW5kb21TdHJpbmcgfSBmcm9tICcuLi9jcnlwdG9VdGlscyc7XG5pbXBvcnQgZGVmYXVsdHMgZnJvbSAnLi4vZGVmYXVsdHMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTY2hlbWFDYWNoZSB7XG4gIGNhY2hlOiBPYmplY3Q7XG5cbiAgY29uc3RydWN0b3IoY2FjaGVDb250cm9sbGVyLCB0dGwgPSBkZWZhdWx0cy5zY2hlbWFDYWNoZVRUTCwgc2luZ2xlQ2FjaGUgPSBmYWxzZSkge1xuICAgIHRoaXMudHRsID0gdHRsO1xuICAgIGlmICh0eXBlb2YgdHRsID09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLnR0bCA9IHBhcnNlSW50KHR0bCk7XG4gICAgfVxuICAgIHRoaXMuY2FjaGUgPSBjYWNoZUNvbnRyb2xsZXI7XG4gICAgdGhpcy5wcmVmaXggPSBTQ0hFTUFfQ0FDSEVfUFJFRklYO1xuICAgIGlmICghc2luZ2xlQ2FjaGUpIHtcbiAgICAgIHRoaXMucHJlZml4ICs9IHJhbmRvbVN0cmluZygyMCk7XG4gICAgfVxuICB9XG5cbiAgcHV0KGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5jYWNoZS5nZXQodGhpcy5wcmVmaXggKyBBTExfS0VZUykudGhlbigoYWxsS2V5cykgPT4ge1xuICAgICAgYWxsS2V5cyA9IGFsbEtleXMgfHwge307XG4gICAgICBhbGxLZXlzW2tleV0gPSB0cnVlO1xuICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFt0aGlzLmNhY2hlLnB1dCh0aGlzLnByZWZpeCArIEFMTF9LRVlTLCBhbGxLZXlzLCB0aGlzLnR0bCksIHRoaXMuY2FjaGUucHV0KGtleSwgdmFsdWUsIHRoaXMudHRsKV0pO1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0QWxsQ2xhc3NlcygpIHtcbiAgICBpZiAoIXRoaXMudHRsKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jYWNoZS5nZXQodGhpcy5wcmVmaXggKyBNQUlOX1NDSEVNQSk7XG4gIH1cblxuICBzZXRBbGxDbGFzc2VzKHNjaGVtYSkge1xuICAgIGlmICghdGhpcy50dGwpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnB1dCh0aGlzLnByZWZpeCArIE1BSU5fU0NIRU1BLCBzY2hlbWEpO1xuICB9XG5cbiAgc2V0T25lU2NoZW1hKGNsYXNzTmFtZSwgc2NoZW1hKSB7XG4gICAgaWYgKCF0aGlzLnR0bCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucHV0KHRoaXMucHJlZml4ICsgY2xhc3NOYW1lLCBzY2hlbWEpO1xuICB9XG5cbiAgZ2V0T25lU2NoZW1hKGNsYXNzTmFtZSkge1xuICAgIGlmICghdGhpcy50dGwpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNhY2hlLmdldCh0aGlzLnByZWZpeCArIGNsYXNzTmFtZSkudGhlbigoc2NoZW1hKSA9PiB7XG4gICAgICBpZiAoc2NoZW1hKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoc2NoZW1hKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmNhY2hlLmdldCh0aGlzLnByZWZpeCArIE1BSU5fU0NIRU1BKS50aGVuKChjYWNoZWRTY2hlbWFzKSA9PiB7XG4gICAgICAgIGNhY2hlZFNjaGVtYXMgPSBjYWNoZWRTY2hlbWFzIHx8IFtdO1xuICAgICAgICBzY2hlbWEgPSBjYWNoZWRTY2hlbWFzLmZpbmQoKGNhY2hlZFNjaGVtYSkgPT4ge1xuICAgICAgICAgIHJldHVybiBjYWNoZWRTY2hlbWEuY2xhc3NOYW1lID09PSBjbGFzc05hbWU7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoc2NoZW1hKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShzY2hlbWEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGNsZWFyKCkge1xuICAgIC8vIFRoYXQgY2xlYXJzIGFsbCBjYWNoZXMuLi5cbiAgICByZXR1cm4gdGhpcy5jYWNoZS5nZXQodGhpcy5wcmVmaXggKyBBTExfS0VZUykudGhlbigoYWxsS2V5cykgPT4ge1xuICAgICAgaWYgKCFhbGxLZXlzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHByb21pc2VzID0gT2JqZWN0LmtleXMoYWxsS2V5cykubWFwKChrZXkpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGUuZGVsKGtleSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==