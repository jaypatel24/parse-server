'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CloudCodeRouter = undefined;

var _PromiseRouter = require('../PromiseRouter');

var _PromiseRouter2 = _interopRequireDefault(_PromiseRouter);

var _node = require('parse/node');

var _node2 = _interopRequireDefault(_node);

var _rest = require('../rest');

var _rest2 = _interopRequireDefault(_rest);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const triggers = require('../triggers');
const middleware = require('../middlewares');

function formatJobSchedule(job_schedule) {
  if (typeof job_schedule.startAfter === 'undefined') {
    job_schedule.startAfter = new Date().toISOString();
  }
  return job_schedule;
}

function validateJobSchedule(config, job_schedule) {
  const jobs = triggers.getJobs(config.applicationId) || {};
  if (job_schedule.jobName && !jobs[job_schedule.jobName]) {
    throw new _node2.default.Error(_node2.default.Error.INTERNAL_SERVER_ERROR, 'Cannot Schedule a job that is not deployed');
  }
}

class CloudCodeRouter extends _PromiseRouter2.default {
  mountRoutes() {
    this.route('GET', '/cloud_code/jobs', middleware.promiseEnforceMasterKeyAccess, CloudCodeRouter.getJobs);
    this.route('GET', '/cloud_code/jobs/data', middleware.promiseEnforceMasterKeyAccess, CloudCodeRouter.getJobsData);
    this.route('POST', '/cloud_code/jobs', middleware.promiseEnforceMasterKeyAccess, CloudCodeRouter.createJob);
    this.route('PUT', '/cloud_code/jobs/:objectId', middleware.promiseEnforceMasterKeyAccess, CloudCodeRouter.editJob);
    this.route('DELETE', '/cloud_code/jobs/:objectId', middleware.promiseEnforceMasterKeyAccess, CloudCodeRouter.deleteJob);
  }

  static getJobs(req) {
    return _rest2.default.find(req.config, req.auth, '_JobSchedule', {}, {}).then(scheduledJobs => {
      return {
        response: scheduledJobs.results
      };
    });
  }

  static getJobsData(req) {
    const config = req.config;
    const jobs = triggers.getJobs(config.applicationId) || {};
    return _rest2.default.find(req.config, req.auth, '_JobSchedule', {}, {}).then(scheduledJobs => {
      return {
        response: {
          in_use: scheduledJobs.results.map(job => job.jobName),
          jobs: Object.keys(jobs)
        }
      };
    });
  }

  static createJob(req) {
    const { job_schedule } = req.body;
    validateJobSchedule(req.config, job_schedule);
    return _rest2.default.create(req.config, req.auth, '_JobSchedule', formatJobSchedule(job_schedule), req.client);
  }

  static editJob(req) {
    const { objectId } = req.params;
    const { job_schedule } = req.body;
    validateJobSchedule(req.config, job_schedule);
    return _rest2.default.update(req.config, req.auth, '_JobSchedule', { objectId }, formatJobSchedule(job_schedule)).then(response => {
      return {
        response
      };
    });
  }

  static deleteJob(req) {
    const { objectId } = req.params;
    return _rest2.default.del(req.config, req.auth, '_JobSchedule', objectId).then(response => {
      return {
        response
      };
    });
  }
}
exports.CloudCodeRouter = CloudCodeRouter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Sb3V0ZXJzL0Nsb3VkQ29kZVJvdXRlci5qcyJdLCJuYW1lcyI6WyJ0cmlnZ2VycyIsInJlcXVpcmUiLCJtaWRkbGV3YXJlIiwiZm9ybWF0Sm9iU2NoZWR1bGUiLCJqb2Jfc2NoZWR1bGUiLCJzdGFydEFmdGVyIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwidmFsaWRhdGVKb2JTY2hlZHVsZSIsImNvbmZpZyIsImpvYnMiLCJnZXRKb2JzIiwiYXBwbGljYXRpb25JZCIsImpvYk5hbWUiLCJFcnJvciIsIklOVEVSTkFMX1NFUlZFUl9FUlJPUiIsIkNsb3VkQ29kZVJvdXRlciIsIm1vdW50Um91dGVzIiwicm91dGUiLCJwcm9taXNlRW5mb3JjZU1hc3RlcktleUFjY2VzcyIsImdldEpvYnNEYXRhIiwiY3JlYXRlSm9iIiwiZWRpdEpvYiIsImRlbGV0ZUpvYiIsInJlcSIsImZpbmQiLCJhdXRoIiwidGhlbiIsInNjaGVkdWxlZEpvYnMiLCJyZXNwb25zZSIsInJlc3VsdHMiLCJpbl91c2UiLCJtYXAiLCJqb2IiLCJPYmplY3QiLCJrZXlzIiwiYm9keSIsImNyZWF0ZSIsImNsaWVudCIsIm9iamVjdElkIiwicGFyYW1zIiwidXBkYXRlIiwiZGVsIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFDQSxNQUFNQSxXQUFrQkMsUUFBUSxhQUFSLENBQXhCO0FBQ0EsTUFBTUMsYUFBa0JELFFBQVEsZ0JBQVIsQ0FBeEI7O0FBRUEsU0FBU0UsaUJBQVQsQ0FBMkJDLFlBQTNCLEVBQXlDO0FBQ3ZDLE1BQUksT0FBT0EsYUFBYUMsVUFBcEIsS0FBbUMsV0FBdkMsRUFBb0Q7QUFDbERELGlCQUFhQyxVQUFiLEdBQTBCLElBQUlDLElBQUosR0FBV0MsV0FBWCxFQUExQjtBQUNEO0FBQ0QsU0FBT0gsWUFBUDtBQUNEOztBQUVELFNBQVNJLG1CQUFULENBQTZCQyxNQUE3QixFQUFxQ0wsWUFBckMsRUFBbUQ7QUFDakQsUUFB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a0JBQWtCQyxZQUFsQixDQUFoRSxFQUFpR3VCLElBQWpHLENBQXVHRSxRQUFELElBQWM7QUFDekgsYUFBTztBQUNMQTtBQURLLE9BQVA7QUFHRCxLQUpNLENBQVA7QUFLRDs7QUFFRCxTQUFPTixTQUFQLENBQWlCQyxHQUFqQixFQUFzQjtBQUNwQixVQUFNLEVBQUVlLFFBQUYsS0FBZWYsSUFBSWdCLE1BQXpCO0FBQ0EsV0FBTyxlQUFLRSxHQUFMLENBQVNsQixJQUFJZixNQUFiLEVBQXFCZSxJQUFJRSxJQUF6QixFQUErQixjQUEvQixFQUErQ2EsUUFBL0MsRUFBeURaLElBQXpELENBQStERSxRQUFELElBQWM7QUFDakYsYUFBTztBQUNMQTtBQURLLE9BQVA7QUFHRCxLQUpNLENBQVA7QUFLRDtBQXREZ0Q7UUFBdENiLGUsR0FBQUEsZSIsImZpbGUiOiJDbG91ZENvZGVSb3V0ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvbWlzZVJvdXRlciAgZnJvbSAnLi4vUHJvbWlzZVJvdXRlcic7XG5pbXBvcnQgUGFyc2UgICAgICAgICAgZnJvbSAncGFyc2Uvbm9kZSc7XG5pbXBvcnQgcmVzdCAgICAgICAgICAgZnJvbSAnLi4vcmVzdCc7XG5jb25zdCB0cmlnZ2VycyAgICAgICAgPSByZXF1aXJlKCcuLi90cmlnZ2VycycpO1xuY29uc3QgbWlkZGxld2FyZSAgICAgID0gcmVxdWlyZSgnLi4vbWlkZGxld2FyZXMnKTtcblxuZnVuY3Rpb24gZm9ybWF0Sm9iU2NoZWR1bGUoam9iX3NjaGVkdWxlKSB7XG4gIGlmICh0eXBlb2Ygam9iX3NjaGVkdWxlLnN0YXJ0QWZ0ZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgam9iX3NjaGVkdWxlLnN0YXJ0QWZ0ZXIgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gIH1cbiAgcmV0dXJuIGpvYl9zY2hlZHVsZTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVKb2JTY2hlZHVsZShjb25maWcsIGpvYl9zY2hlZHVsZSkge1xuICBjb25zdCBqb2JzID0gdHJpZ2dlcnMuZ2V0Sm9icyhjb25maWcuYXBwbGljYXRpb25JZCkgfHwge307XG4gIGlmIChqb2Jfc2NoZWR1bGUuam9iTmFtZSAmJiAham9ic1tqb2Jfc2NoZWR1bGUuam9iTmFtZV0pIHtcbiAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoUGFyc2UuRXJyb3IuSU5URVJOQUxfU0VSVkVSX0VSUk9SLCAnQ2Fubm90IFNjaGVkdWxlIGEgam9iIHRoYXQgaXMgbm90IGRlcGxveWVkJyk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENsb3VkQ29kZVJvdXRlciBleHRlbmRzIFByb21pc2VSb3V0ZXIge1xuICBtb3VudFJvdXRlcygpIHtcbiAgICB0aGlzLnJvdXRlKCdHRVQnLCAnL2Nsb3VkX2NvZGUvam9icycsIG1pZGRsZXdhcmUucHJvbWlzZUVuZm9yY2VNYXN0ZXJLZXlBY2Nlc3MsIENsb3VkQ29kZVJvdXRlci5nZXRKb2JzKTtcbiAgICB0aGlzLnJvdXRlKCdHRVQnLCAnL2Nsb3VkX2NvZGUvam9icy9kYXRhJywgbWlkZGxld2FyZS5wcm9taXNlRW5mb3JjZU1hc3RlcktleUFjY2VzcywgQ2xvdWRDb2RlUm91dGVyLmdldEpvYnNEYXRhKTtcbiAgICB0aGlzLnJvdXRlKCdQT1NUJywgJy9jbG91ZF9jb2RlL2pvYnMnLCBtaWRkbGV3YXJlLnByb21pc2VFbmZvcmNlTWFzdGVyS2V5QWNjZXNzLCBDbG91ZENvZGVSb3V0ZXIuY3JlYXRlSm9iKTtcbiAgICB0aGlzLnJvdXRlKCdQVVQnLCAnL2Nsb3VkX2NvZGUvam9icy86b2JqZWN0SWQnLCBtaWRkbGV3YXJlLnByb21pc2VFbmZvcmNlTWFzdGVyS2V5QWNjZXNzLCBDbG91ZENvZGVSb3V0ZXIuZWRpdEpvYik7XG4gICAgdGhpcy5yb3V0ZSgnREVMRVRFJywgJy9jbG91ZF9jb2RlL2pvYnMvOm9iamVjdElkJywgbWlkZGxld2FyZS5wcm9taXNlRW5mb3JjZU1hc3RlcktleUFjY2VzcywgQ2xvdWRDb2RlUm91dGVyLmRlbGV0ZUpvYik7XG4gIH1cblxuICBzdGF0aWMgZ2V0Sm9icyhyZXEpIHtcbiAgICByZXR1cm4gcmVzdC5maW5kKHJlcS5jb25maWcsIHJlcS5hdXRoLCAnX0pvYlNjaGVkdWxlJywge30sIHt9KS50aGVuKChzY2hlZHVsZWRKb2JzKSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZXNwb25zZTogc2NoZWR1bGVkSm9icy5yZXN1bHRzXG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgZ2V0Sm9ic0RhdGEocmVxKSB7XG4gICAgY29uc3QgY29uZmlnID0gcmVxLmNvbmZpZztcbiAgICBjb25zdCBqb2JzID0gdHJpZ2dlcnMuZ2V0Sm9icyhjb25maWcuYXBwbGljYXRpb25JZCkgfHwge307XG4gICAgcmV0dXJuIHJlc3QuZmluZChyZXEuY29uZmlnLCByZXEuYXV0aCwgJ19Kb2JTY2hlZHVsZScsIHt9LCB7fSkudGhlbigoc2NoZWR1bGVkSm9icykgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVzcG9uc2U6IHtcbiAgICAgICAgICBpbl91c2U6IHNjaGVkdWxlZEpvYnMucmVzdWx0cy5tYXAoKGpvYikgPT4gam9iLmpvYk5hbWUpLFxuICAgICAgICAgIGpvYnM6IE9iamVjdC5rZXlzKGpvYnMpLFxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgc3RhdGljIGNyZWF0ZUpvYihyZXEpIHtcbiAgICBjb25zdCB7IGpvYl9zY2hlZHVsZSB9ID0gcmVxLmJvZHk7XG4gICAgdmFsaWRhdGVKb2JTY2hlZHVsZShyZXEuY29uZmlnLCBqb2Jfc2NoZWR1bGUpO1xuICAgIHJldHVybiByZXN0LmNyZWF0ZShyZXEuY29uZmlnLCByZXEuYXV0aCwgJ19Kb2JTY2hlZHVsZScsIGZvcm1hdEpvYlNjaGVkdWxlKGpvYl9zY2hlZHVsZSksIHJlcS5jbGllbnQpO1xuICB9XG5cbiAgc3RhdGljIGVkaXRKb2IocmVxKSB7XG4gICAgY29uc3QgeyBvYmplY3RJZCB9ID0gcmVxLnBhcmFtcztcbiAgICBjb25zdCB7IGpvYl9zY2hlZHVsZSB9ID0gcmVxLmJvZHk7XG4gICAgdmFsaWRhdGVKb2JTY2hlZHVsZShyZXEuY29uZmlnLCBqb2Jfc2NoZWR1bGUpO1xuICAgIHJldHVybiByZXN0LnVwZGF0ZShyZXEuY29uZmlnLCByZXEuYXV0aCwgJ19Kb2JTY2hlZHVsZScsIHsgb2JqZWN0SWQgfSwgZm9ybWF0Sm9iU2NoZWR1bGUoam9iX3NjaGVkdWxlKSkudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlc3BvbnNlXG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgZGVsZXRlSm9iKHJlcSkge1xuICAgIGNvbnN0IHsgb2JqZWN0SWQgfSA9IHJlcS5wYXJhbXM7XG4gICAgcmV0dXJuIHJlc3QuZGVsKHJlcS5jb25maWcsIHJlcS5hdXRoLCAnX0pvYlNjaGVkdWxlJywgb2JqZWN0SWQpLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZXNwb25zZVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG4iXX0=