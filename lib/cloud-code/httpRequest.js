'use strict';

var _request = require('request');

var _request2 = _interopRequireDefault(_request);

var _node = require('parse/node');

var _node2 = _interopRequireDefault(_node);

var _HTTPResponse = require('./HTTPResponse');

var _HTTPResponse2 = _interopRequireDefault(_HTTPResponse);

var _querystring = require('querystring');

var _querystring2 = _interopRequireDefault(_querystring);

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var encodeBody = function ({ body, headers = {} }) {
  if (typeof body !== 'object') {
    return { body, headers };
  }
  var contentTypeKeys = Object.keys(headers).filter(key => {
    return key.match(/content-type/i) != null;
  });

  if (contentTypeKeys.length == 0) {
    // no content type
    //  As per https://parse.com/docs/cloudcode/guide#cloud-code-advanced-sending-a-post-request the default encoding is supposedly x-www-form-urlencoded

    body = _querystring2.default.stringify(body);
    headers['Content-Type'] = 'application/x-www-form-urlencoded';
  } else {
    /* istanbul ignore next */
    if (contentTypeKeys.length > 1) {
      _logger2.default.error('Parse.Cloud.httpRequest', 'multiple content-type headers are set.');
    }
    // There maybe many, we'll just take the 1st one
    var contentType = contentTypeKeys[0];
    if (headers[contentType].match(/application\/json/i)) {
      body = JSON.stringify(body);
    } else if (headers[contentType].match(/application\/x-www-form-urlencoded/i)) {
      body = _querystring2.default.stringify(body);
    }
  }
  return { body, headers };
};

module.exports = function (options) {
  var promise = new _node2.default.Promise();
  var callbacks = {
    success: options.success,
    error: options.error
  };
  delete options.success;
  delete options.error;
  delete options.uri; // not supported
  options = Object.assign(options, encodeBody(options));
  // set follow redirects to false by default
  options.followRedirect = options.followRedirects == true;
  // support params options
  if (typeof options.params === 'object') {
    options.qs = options.params;
  } else if (typeof options.params === 'string') {
    options.qs = _querystring2.default.parse(options.params);
  }
  // force the response as a buffer
  options.encoding = null;

  (0, _request2.default)(options, (error, response, body) => {
    if (error) {
      if (callbacks.error) {
        callbacks.error(error);
      }
      return promise.reject(error);
    }
    const httpResponse = new _HTTPResponse2.default(response, body);

    // Consider <200 && >= 400 as errors
    if (httpResponse.status < 200 || httpResponse.status >= 400) {
      if (callbacks.error) {
        callbacks.error(httpResponse);
      }
      return promise.reject(httpResponse);
    } else {
      if (callbacks.success) {
        callbacks.success(httpResponse);
      }
      return promise.resolve(httpResponse);
    }
  });
  return promise;
};

module.exports.encodeBody = encodeBody;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbG91ZC1jb2RlL2h0dHBSZXF1ZXN0LmpzIl0sIm5hbWVzIjpbImVuY29kZUJvZHkiLCJib2R5IiwiaGVhZGVycyIsImNvbnRlbnRUeXBlS2V5cyIsIk9iamVjdCIsImtleXMiLCJmaWx0ZXIiLCJrZXkiLCJtYXRjaCIsImxlbmd0aCIsInN0cmluZ2lmeSIsImVycm9yIiwiY29udGVudFR5cGUiLCJKU09OIiwibW9kdWxlIiwiZXhwb3J0cyIsIm9wdGlvbnMiLCJwcm9taXNlIiwiUHJvbWlzZSIsImNhbGxiYWNrcyIsInN1Y2Nlc3MiLCJ1cmkiLCJhc3NpZ24iLCJmb2xsb3dSZWRpcmVjdCIsImZvbGxvd1JlZGlyZWN0cyIsInBhcmFtcyIsInFzIiwicGFyc2UiLCJlbmNvZGluZyIsInJlc3BvbnNlIiwicmVqZWN0IiwiaHR0cFJlc3BvbnNlIiwic3RhdHVzIiwicmVzb2x2ZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFQSxJQUFJQSxhQUFhLFVBQVMsRUFBQ0MsSUFBRCxFQUFPQyxVQUFVLEVBQWpCLEVBQVQsRUFBK0I7QUFDOUMsTUFBSSxPQUFPRCxJQUFQLEtBQWdCLFFBQXBCLEVBQThCO0FBQzVCLFdBQU8sRUFBQ0EsSUFBRCxFQUFPQyxPQUFQLEVBQVA7QUFDRDtBQUNELE1BQUlDLGtCQUFrQkMsT0FBT0MsSUFBUCxDQUFZSCxPQUFaLEVBQXFCSSxNQUFyQixDQUE2QkMsR0FBRCxJQUFTO0FBQ3pELFdBQU9BLElBQUlDLEtBQUosQ0FBVSxlQUFWLEtBQThCLElBQXJDO0FBQ0QsR0FGcUIsQ0FBdEI7O0FBSUEsTUFBSUwsZ0JBQWdCTSxNQUFoQixJQUEwQixDQUE5QixFQUFpQztBQUMvQjtBQUNBOztBQUVBUixXQUFPLHNCQUFZUyxTQUFaLENBQXNCVCxJQUF0QixDQUFQO0FBQ0FDLFlBQVEsY0FBUixJQUEwQixtQ0FBMUI7QUFDRCxHQU5ELE1BTU87QUFDTDtBQUNBLFFBQUlDLGdCQUFnQk0sTUFBaEIsR0FBeUIsQ0FBN0IsRUFBZ0M7QUFDOUIsdUJBQUlFLEtBQUosQ0FBVSx5QkFBVixFQUFxQyx3Q0FBckM7QUFDRDtBQUNEO0FBQ0EsUUFBSUMsY0FBY1QsZ0JBQWdCLENBQWhCLENBQWxCO0FBQ0EsUUFBSUQsUUFBUVUsV0FBUixFQUFxQkosS0FBckIsQ0FBMkIsb0JBQTNCLENBQUosRUFBc0Q7QUFDcERQLGFBQU9ZLEtBQUtILFNBQUwsQ0FBZVQsSUFBZixDQUFQO0FBQ0QsS0FGRCxNQUVPLElBQUdDLFFBQVFVLFdBQVIsRUFBcUJKLEtBQXJCLENBQTJCLHFDQUEzQixDQUFILEVBQXNFO0FBQzNFUCxhQUFPLHNCQUFZUyxTQUFaLENBQXNCVCxJQUF0QixDQUFQO0FBQ0Q7QUFDRjtBQUNELFNBQU8sRUFBQ0EsSUFBRCxFQUFPQyxPQUFQLEVBQVA7QUFDRCxDQTVCRDs7QUE4QkFZLE9BQU9DLE9BQVAsR0FBaUIsVUFBU0MsT0FBVCxFQUFrQjtBQUNqQyxNQUFJQyxVQUFVLElBQUksZUFBTUMsT0FBVixFQUFkO0FBQ0EsTUFBSUMsWUFBWTtBQUNkQyxhQUFTSixRQUFRSSxPQURIO0FBRWRULFdBQU9LLFFBQVFMO0FBRkQsR0FBaEI7QUFJQSxTQUFPSyxRQUFRSSxPQUFmO0FBQ0EsU0FBT0osUUFBUUwsS0FBZjtBQUNBLFNBQU9LLFFBQVFLLEdBQWYsQ0FSaUMsQ0FRYjtBQUNwQkwsWUFBVVosT0FBT2tCLE1BQVAsQ0FBY04sT0FBZCxFQUF3QmhCLFdBQVdnQixPQUFYLENBQXhCLENBQVY7QUFDQTtBQUNBQSxVQUFRTyxjQUFSLEdBQXlCUCxRQUFRUSxlQUFSLElBQTJCLElBQXBEO0FBQ0E7QUFDQSxNQUFJLE9BQU9SLFFBQVFTLE1BQWYsS0FBMEIsUUFBOUIsRUFBd0M7QUFDdENULFlBQVFVLEVBQVIsR0FBYVYsUUFBUVMsTUFBckI7QUFDRCxHQUZELE1BRU8sSUFBSSxPQUFPVCxRQUFRUyxNQUFmLEtBQTBCLFFBQTlCLEVBQXdDO0FBQzdDVCxZQUFRVSxFQUFSLEdBQWEsc0JBQVlDLEtBQVosQ0FBa0JYLFFBQVFTLE1BQTFCLENBQWI7QUFDRDtBQUNEO0FBQ0FULFVBQVFZLFFBQVIsR0FBbUIsSUFBbkI7O0FBRUEseUJBQVFaLE9BQVIsRUFBaUIsQ0FBQ0wsS0FBRCxFQUFRa0IsUUFBUixFQUFrQjVCLElBQWxCLEtBQTJCO0FBQzFDLFFBQUlVLEtBQUosRUFBVztBQUNULFVBQUlRLFVBQVVSLEtBQWQsRUFBcUI7QUFDbkJRLGtCQUFVUixLQUFWLENBQWdCQSxLQUFoQjtBQUNEO0FBQ0QsYUFBT00sUUFBUWEsTUFBUixDQUFlbkIsS0FBZixDQUFQO0FBQ0Q7QUFDRCxVQUFNb0IsZUFBZSwyQkFBaUJGLFFBQWpCLEVBQTJCNUIsSUFBM0IsQ0FBckI7O0FBRUE7QUFDQSxRQUFJOEIsYUFBYUMsTUFBYixHQUFzQixHQUF0QixJQUE2QkQsYUFBYUMsTUFBYixJQUF1QixHQUF4RCxFQUE2RDtBQUMzRCxVQUFJYixVQUFVUixLQUFkLEVBQXFCO0FBQ25CUSxrQkFBVVIsS0FBVixDQUFnQm9CLFlBQWhCO0FBQ0Q7QUFDRCxhQUFPZCxRQUFRYSxNQUFSLENBQWVDLFlBQWYsQ0FBUDtBQUNELEtBTEQsTUFLTztBQUNMLFVBQUlaLFVBQVVDLE9BQWQsRUFBdUI7QUFDckJELGtCQUFVQyxPQUFWLENBQWtCVyxZQUFsQjtBQUNEO0FBQ0QsYUFBT2QsUUFBUWdCLE9BQVIsQ0FBZ0JGLFlBQWhCLENBQVA7QUFDRDtBQUNGLEdBckJEO0FBc0JBLFNBQU9kLE9BQVA7QUFDRCxDQTVDRDs7QUE4Q0FILE9BQU9DLE9BQVAsQ0FBZWYsVUFBZixHQUE0QkEsVUFBNUIiLCJmaWxlIjoiaHR0cFJlcXVlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcmVxdWVzdCBmcm9tICdyZXF1ZXN0JztcbmltcG9ydCBQYXJzZSBmcm9tICdwYXJzZS9ub2RlJztcbmltcG9ydCBIVFRQUmVzcG9uc2UgZnJvbSAnLi9IVFRQUmVzcG9uc2UnO1xuaW1wb3J0IHF1ZXJ5c3RyaW5nIGZyb20gJ3F1ZXJ5c3RyaW5nJztcbmltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyJztcblxudmFyIGVuY29kZUJvZHkgPSBmdW5jdGlvbih7Ym9keSwgaGVhZGVycyA9IHt9fSkge1xuICBpZiAodHlwZW9mIGJvZHkgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIHtib2R5LCBoZWFkZXJzfTtcbiAgfVxuICB2YXIgY29udGVudFR5cGVLZXlzID0gT2JqZWN0LmtleXMoaGVhZGVycykuZmlsdGVyKChrZXkpID0+IHtcbiAgICByZXR1cm4ga2V5Lm1hdGNoKC9jb250ZW50LXR5cGUvaSkgIT0gbnVsbDtcbiAgfSk7XG5cbiAgaWYgKGNvbnRlbnRUeXBlS2V5cy5sZW5ndGggPT0gMCkge1xuICAgIC8vIG5vIGNvbnRlbnQgdHlwZVxuICAgIC8vICBBcyBwZXIgaHR0cHM6Ly9wYXJzZS5jb20vZG9jcy9jbG91ZGNvZGUvZ3VpZGUjY2xvdWQtY29kZS1hZHZhbmNlZC1zZW5kaW5nLWEtcG9zdC1yZXF1ZXN0IHRoZSBkZWZhdWx0IGVuY29kaW5nIGlzIHN1cHBvc2VkbHkgeC13d3ctZm9ybS11cmxlbmNvZGVkXG5cbiAgICBib2R5ID0gcXVlcnlzdHJpbmcuc3RyaW5naWZ5KGJvZHkpO1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCc7XG4gIH0gZWxzZSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBpZiAoY29udGVudFR5cGVLZXlzLmxlbmd0aCA+IDEpIHtcbiAgICAgIGxvZy5lcnJvcignUGFyc2UuQ2xvdWQuaHR0cFJlcXVlc3QnLCAnbXVsdGlwbGUgY29udGVudC10eXBlIGhlYWRlcnMgYXJlIHNldC4nKTtcbiAgICB9XG4gICAgLy8gVGhlcmUgbWF5YmUgbWFueSwgd2UnbGwganVzdCB0YWtlIHRoZSAxc3Qgb25lXG4gICAgdmFyIGNvbnRlbnRUeXBlID0gY29udGVudFR5cGVLZXlzWzBdO1xuICAgIGlmIChoZWFkZXJzW2NvbnRlbnRUeXBlXS5tYXRjaCgvYXBwbGljYXRpb25cXC9qc29uL2kpKSB7XG4gICAgICBib2R5ID0gSlNPTi5zdHJpbmdpZnkoYm9keSk7XG4gICAgfSBlbHNlIGlmKGhlYWRlcnNbY29udGVudFR5cGVdLm1hdGNoKC9hcHBsaWNhdGlvblxcL3gtd3d3LWZvcm0tdXJsZW5jb2RlZC9pKSkge1xuICAgICAgYm9keSA9IHF1ZXJ5c3RyaW5nLnN0cmluZ2lmeShib2R5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtib2R5LCBoZWFkZXJzfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gIHZhciBwcm9taXNlID0gbmV3IFBhcnNlLlByb21pc2UoKTtcbiAgdmFyIGNhbGxiYWNrcyA9IHtcbiAgICBzdWNjZXNzOiBvcHRpb25zLnN1Y2Nlc3MsXG4gICAgZXJyb3I6IG9wdGlvbnMuZXJyb3JcbiAgfTtcbiAgZGVsZXRlIG9wdGlvbnMuc3VjY2VzcztcbiAgZGVsZXRlIG9wdGlvbnMuZXJyb3I7XG4gIGRlbGV0ZSBvcHRpb25zLnVyaTsgLy8gbm90IHN1cHBvcnRlZFxuICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbihvcHRpb25zLCAgZW5jb2RlQm9keShvcHRpb25zKSk7XG4gIC8vIHNldCBmb2xsb3cgcmVkaXJlY3RzIHRvIGZhbHNlIGJ5IGRlZmF1bHRcbiAgb3B0aW9ucy5mb2xsb3dSZWRpcmVjdCA9IG9wdGlvbnMuZm9sbG93UmVkaXJlY3RzID09IHRydWU7XG4gIC8vIHN1cHBvcnQgcGFyYW1zIG9wdGlvbnNcbiAgaWYgKHR5cGVvZiBvcHRpb25zLnBhcmFtcyA9PT0gJ29iamVjdCcpIHtcbiAgICBvcHRpb25zLnFzID0gb3B0aW9ucy5wYXJhbXM7XG4gIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMucGFyYW1zID09PSAnc3RyaW5nJykge1xuICAgIG9wdGlvbnMucXMgPSBxdWVyeXN0cmluZy5wYXJzZShvcHRpb25zLnBhcmFtcyk7XG4gIH1cbiAgLy8gZm9yY2UgdGhlIHJlc3BvbnNlIGFzIGEgYnVmZmVyXG4gIG9wdGlvbnMuZW5jb2RpbmcgPSBudWxsO1xuXG4gIHJlcXVlc3Qob3B0aW9ucywgKGVycm9yLCByZXNwb25zZSwgYm9keSkgPT4ge1xuICAgIGlmIChlcnJvcikge1xuICAgICAgaWYgKGNhbGxiYWNrcy5lcnJvcikge1xuICAgICAgICBjYWxsYmFja3MuZXJyb3IoZXJyb3IpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB9XG4gICAgY29uc3QgaHR0cFJlc3BvbnNlID0gbmV3IEhUVFBSZXNwb25zZShyZXNwb25zZSwgYm9keSk7XG5cbiAgICAvLyBDb25zaWRlciA8MjAwICYmID49IDQwMCBhcyBlcnJvcnNcbiAgICBpZiAoaHR0cFJlc3BvbnNlLnN0YXR1cyA8IDIwMCB8fCBodHRwUmVzcG9uc2Uuc3RhdHVzID49IDQwMCkge1xuICAgICAgaWYgKGNhbGxiYWNrcy5lcnJvcikge1xuICAgICAgICBjYWxsYmFja3MuZXJyb3IoaHR0cFJlc3BvbnNlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcm9taXNlLnJlamVjdChodHRwUmVzcG9uc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoY2FsbGJhY2tzLnN1Y2Nlc3MpIHtcbiAgICAgICAgY2FsbGJhY2tzLnN1Y2Nlc3MoaHR0cFJlc3BvbnNlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcm9taXNlLnJlc29sdmUoaHR0cFJlc3BvbnNlKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzLmVuY29kZUJvZHkgPSBlbmNvZGVCb2R5O1xuIl19