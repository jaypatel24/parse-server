'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LiveQueryController = undefined;

var _ParseCloudCodePublisher = require('../LiveQuery/ParseCloudCodePublisher');

var _Options = require('../Options');

class LiveQueryController {

  constructor(config) {
    // If config is empty, we just assume no classs needs to be registered as LiveQuery
    if (!config || !config.classNames) {
      this.classNames = new Set();
    } else if (config.classNames instanceof Array) {
      this.classNames = new Set(config.classNames);
    } else {
      throw 'liveQuery.classes should be an array of string';
    }
    this.liveQueryPublisher = new _ParseCloudCodePublisher.ParseCloudCodePublisher(config);
  }

  onAfterSave(className, currentObject, originalObject) {
    if (!this.hasLiveQuery(className)) {
      return;
    }
    const req = this._makePublisherRequest(currentObject, originalObject);
    this.liveQueryPublisher.onCloudCodeAfterSave(req);
  }

  onAfterDelete(className, currentObject, originalObject) {
    if (!this.hasLiveQuery(className)) {
      return;
    }
    const req = this._makePublisherRequest(currentObject, originalObject);
    this.liveQueryPublisher.onCloudCodeAfterDelete(req);
  }

  hasLiveQuery(className) {
    return this.classNames.has(className);
  }

  _makePublisherRequest(currentObject, originalObject) {
    const req = {
      object: currentObject
    };
    if (currentObject) {
      req.original = originalObject;
    }
    return req;
  }
}

exports.LiveQueryController = LiveQueryController;
exports.default = LiveQueryController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Db250cm9sbGVycy9MaXZlUXVlcnlDb250cm9sbGVyLmpzIl0sIm5hbWVzIjpbIkxpdmVRdWVyeUNvbnRyb2xsZXIiLCJjb25zdHJ1Y3RvciIsImNvbmZpZyIsImNsYXNzTmFtZXMiLCJTZXQiLCJBcnJheSIsImxpdmVRdWVyeVB1Ymxpc2hlciIsIm9uQWZ0ZXJTYXZlIiwiY2xhc3NOYW1lIiwiY3VycmVudE9iamVjdCIsIm9yaWdpbmFsT2JqZWN0IiwiaGFzTGl2ZVF1ZXJ5IiwicmVxIiwiX21ha2VQdWJsaXNoZXJSZXF1ZXN0Iiwib25DbG91ZENvZGVBZnRlclNhdmUiLCJvbkFmdGVyRGVsZXRlIiwib25DbG91ZENvZGVBZnRlckRlbGV0ZSIsImhhcyIsIm9iamVjdCIsIm9yaWdpbmFsIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ08sTUFBTUEsbUJBQU4sQ0FBMEI7O0FBSS9CQyxjQUFZQyxNQUFaLEVBQXVDO0FBQ3JDO0FBQ0EsUUFBSSxDQUFDQSxNQUFELElBQVcsQ0FBQ0EsT0FBT0MsVUFBdkIsRUFBbUM7QUFDakMsV0FBS0EsVUFBTCxHQUFrQixJQUFJQyxHQUFKLEVBQWxCO0FBQ0QsS0FGRCxNQUVPLElBQUlGLE9BQU9DLFVBQVAsWUFBNkJFLEtBQWpDLEVBQXdDO0FBQzdDLFdBQUtGLFVBQUwsR0FBa0IsSUFBSUMsR0FBSixDQUFRRixPQUFPQyxVQUFmLENBQWxCO0FBQ0QsS0FGTSxNQUVBO0FBQ0wsWUFBTSxnREFBTjtBQUNEO0FBQ0QsU0FBS0csa0JBQUwsR0FBMEIscURBQTRCSixNQUE1QixDQUExQjtBQUNEOztBQUVESyxjQUFZQyxTQUFaLEVBQStCQyxhQUEvQixFQUFtREMsY0FBbkQsRUFBd0U7QUFDdEUsUUFBSSxDQUFDLEtBQUtDLFlBQUwsQ0FBa0JILFNBQWxCLENBQUwsRUFBbUM7QUFDakM7QUFDRDtBQUNELFVBQU1JLE1BQU0sS0FBS0MscUJBQUwsQ0FBMkJKLGFBQTNCLEVBQTBDQyxjQUExQyxDQUFaO0FBQ0EsU0FBS0osa0JBQUwsQ0FBd0JRLG9CQUF4QixDQUE2Q0YsR0FBN0M7QUFDRDs7QUFFREcsZ0JBQWNQLFNBQWQsRUFBaUNDLGFBQWpDLEVBQXFEQyxjQUFyRCxFQUEwRTtBQUN4RSxRQUFJLENBQUMsS0FBS0MsWUFBTCxDQUFrQkgsU0FBbEIsQ0FBTCxFQUFtQztBQUNqQztBQUNEO0FBQ0QsVUFBTUksTUFBTSxLQUFLQyxxQkFBTCxDQUEyQkosYUFBM0IsRUFBMENDLGNBQTFDLENBQVo7QUFDQSxTQUFLSixrQkFBTCxDQUF3QlUsc0JBQXhCLENBQStDSixHQUEvQztBQUNEOztBQUVERCxlQUFhSCxTQUFiLEVBQXlDO0FBQ3ZDLFdBQU8sS0FBS0wsVUFBTCxDQUFnQmMsR0FBaEIsQ0FBb0JULFNBQXBCLENBQVA7QUFDRDs7QUFFREssd0JBQXNCSixhQUF0QixFQUEwQ0MsY0FBMUMsRUFBb0U7QUFDbEUsVUFBTUUsTUFBTTtBQUNWTSxjQUFRVDtBQURFLEtBQVo7QUFHQSxRQUFJQSxhQUFKLEVBQW1CO0FBQ2pCRyxVQUFJTyxRQUFKLEdBQWVULGNBQWY7QUFDRDtBQUNELFdBQU9FLEdBQVA7QUFDRDtBQTVDOEI7O1FBQXBCWixtQixHQUFBQSxtQjtrQkErQ0VBLG1CIiwiZmlsZSI6IkxpdmVRdWVyeUNvbnRyb2xsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYXJzZUNsb3VkQ29kZVB1Ymxpc2hlciB9IGZyb20gJy4uL0xpdmVRdWVyeS9QYXJzZUNsb3VkQ29kZVB1Ymxpc2hlcic7XG5pbXBvcnQgeyBMaXZlUXVlcnlPcHRpb25zIH0gZnJvbSAnLi4vT3B0aW9ucyc7XG5leHBvcnQgY2xhc3MgTGl2ZVF1ZXJ5Q29udHJvbGxlciB7XG4gIGNsYXNzTmFtZXM6IGFueTtcbiAgbGl2ZVF1ZXJ5UHVibGlzaGVyOiBhbnk7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiA/TGl2ZVF1ZXJ5T3B0aW9ucykge1xuICAgIC8vIElmIGNvbmZpZyBpcyBlbXB0eSwgd2UganVzdCBhc3N1bWUgbm8gY2xhc3NzIG5lZWRzIHRvIGJlIHJlZ2lzdGVyZWQgYXMgTGl2ZVF1ZXJ5XG4gICAgaWYgKCFjb25maWcgfHwgIWNvbmZpZy5jbGFzc05hbWVzKSB7XG4gICAgICB0aGlzLmNsYXNzTmFtZXMgPSBuZXcgU2V0KCk7XG4gICAgfSBlbHNlIGlmIChjb25maWcuY2xhc3NOYW1lcyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICB0aGlzLmNsYXNzTmFtZXMgPSBuZXcgU2V0KGNvbmZpZy5jbGFzc05hbWVzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgJ2xpdmVRdWVyeS5jbGFzc2VzIHNob3VsZCBiZSBhbiBhcnJheSBvZiBzdHJpbmcnXG4gICAgfVxuICAgIHRoaXMubGl2ZVF1ZXJ5UHVibGlzaGVyID0gbmV3IFBhcnNlQ2xvdWRDb2RlUHVibGlzaGVyKGNvbmZpZyk7XG4gIH1cblxuICBvbkFmdGVyU2F2ZShjbGFzc05hbWU6IHN0cmluZywgY3VycmVudE9iamVjdDogYW55LCBvcmlnaW5hbE9iamVjdDogYW55KSB7XG4gICAgaWYgKCF0aGlzLmhhc0xpdmVRdWVyeShjbGFzc05hbWUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHJlcSA9IHRoaXMuX21ha2VQdWJsaXNoZXJSZXF1ZXN0KGN1cnJlbnRPYmplY3QsIG9yaWdpbmFsT2JqZWN0KTtcbiAgICB0aGlzLmxpdmVRdWVyeVB1Ymxpc2hlci5vbkNsb3VkQ29kZUFmdGVyU2F2ZShyZXEpO1xuICB9XG5cbiAgb25BZnRlckRlbGV0ZShjbGFzc05hbWU6IHN0cmluZywgY3VycmVudE9iamVjdDogYW55LCBvcmlnaW5hbE9iamVjdDogYW55KSB7XG4gICAgaWYgKCF0aGlzLmhhc0xpdmVRdWVyeShjbGFzc05hbWUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHJlcSA9IHRoaXMuX21ha2VQdWJsaXNoZXJSZXF1ZXN0KGN1cnJlbnRPYmplY3QsIG9yaWdpbmFsT2JqZWN0KTtcbiAgICB0aGlzLmxpdmVRdWVyeVB1Ymxpc2hlci5vbkNsb3VkQ29kZUFmdGVyRGVsZXRlKHJlcSk7XG4gIH1cblxuICBoYXNMaXZlUXVlcnkoY2xhc3NOYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5jbGFzc05hbWVzLmhhcyhjbGFzc05hbWUpO1xuICB9XG5cbiAgX21ha2VQdWJsaXNoZXJSZXF1ZXN0KGN1cnJlbnRPYmplY3Q6IGFueSwgb3JpZ2luYWxPYmplY3Q6IGFueSk6IGFueSB7XG4gICAgY29uc3QgcmVxID0ge1xuICAgICAgb2JqZWN0OiBjdXJyZW50T2JqZWN0XG4gICAgfTtcbiAgICBpZiAoY3VycmVudE9iamVjdCkge1xuICAgICAgcmVxLm9yaWdpbmFsID0gb3JpZ2luYWxPYmplY3Q7XG4gICAgfVxuICAgIHJldHVybiByZXE7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTGl2ZVF1ZXJ5Q29udHJvbGxlcjtcbiJdfQ==