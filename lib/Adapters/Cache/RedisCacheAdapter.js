'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RedisCacheAdapter = undefined;

var _redis = require('redis');

var _redis2 = _interopRequireDefault(_redis);

var _logger = require('../../logger');

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DEFAULT_REDIS_TTL = 30 * 1000; // 30 seconds in milliseconds

function debug() {
  _logger2.default.debug.apply(_logger2.default, ['RedisCacheAdapter', ...arguments]);
}

class RedisCacheAdapter {

  constructor(redisCtx, ttl = DEFAULT_REDIS_TTL) {
    this.client = _redis2.default.createClient(redisCtx);
    this.p = Promise.resolve();
    this.ttl = ttl;
  }

  get(key) {
    debug('get', key);
    this.p = this.p.then(() => {
      return new Promise(resolve => {
        this.client.get(key, function (err, res) {
          debug('-> get', key, res);
          if (!res) {
            return resolve(null);
          }
          resolve(JSON.parse(res));
        });
      });
    });
    return this.p;
  }

  put(key, value, ttl = this.ttl) {
    value = JSON.stringify(value);
    debug('put', key, value, ttl);
    if (ttl === 0) {
      return this.p; // ttl of zero is a logical no-op, but redis cannot set expire time of zero
    }
    if (ttl < 0 || isNaN(ttl)) {
      ttl = DEFAULT_REDIS_TTL;
    }
    this.p = this.p.then(() => {
      return new Promise(resolve => {
        if (ttl === Infinity) {
          this.client.set(key, value, function () {
            resolve();
          });
        } else {
          this.client.psetex(key, ttl, value, function () {
            resolve();
          });
        }
      });
    });
    return this.p;
  }

  del(key) {
    debug('del', key);
    this.p = this.p.then(() => {
      return new Promise(resolve => {
        this.client.del(key, function () {
          resolve();
        });
      });
    });
    return this.p;
  }

  clear() {
    debug('clear');
    this.p = this.p.then(() => {
      return new Promise(resolve => {
        this.client.flushdb(function () {
          resolve();
        });
      });
    });
    return this.p;
  }
}

exports.RedisCacheAdapter = RedisCacheAdapter;
exports.default = RedisCacheAdapter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9BZGFwdGVycy9DYWNoZS9SZWRpc0NhY2hlQWRhcHRlci5qcyJdLCJuYW1lcyI6WyJERUZBVUxUX1JFRElTX1RUTCIsImRlYnVnIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJSZWRpc0NhY2hlQWRhcHRlciIsImNvbnN0cnVjdG9yIiwicmVkaXNDdHgiLCJ0dGwiLCJjbGllbnQiLCJjcmVhdGVDbGllbnQiLCJwIiwiUHJvbWlzZSIsInJlc29sdmUiLCJnZXQiLCJrZXkiLCJ0aGVuIiwiZXJyIiwicmVzIiwiSlNPTiIsInBhcnNlIiwicHV0IiwidmFsdWUiLCJzdHJpbmdpZnkiLCJpc05hTiIsIkluZmluaXR5Iiwic2V0IiwicHNldGV4IiwiZGVsIiwiY2xlYXIiLCJmbHVzaGRiIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7QUFDQTs7Ozs7O0FBRUEsTUFBTUEsb0JBQW9CLEtBQUssSUFBL0IsQyxDQUFxQzs7QUFFckMsU0FBU0MsS0FBVCxHQUFpQjtBQUNmLG1CQUFPQSxLQUFQLENBQWFDLEtBQWIsbUJBQTJCLENBQUMsbUJBQUQsRUFBc0IsR0FBR0MsU0FBekIsQ0FBM0I7QUFDRDs7QUFFTSxNQUFNQyxpQkFBTixDQUF3Qjs7QUFFN0JDLGNBQVlDLFFBQVosRUFBc0JDLE1BQU1QLGlCQUE1QixFQUErQztBQUM3QyxTQUFLUSxNQUFMLEdBQWMsZ0JBQU1DLFlBQU4sQ0FBbUJILFFBQW5CLENBQWQ7QUFDQSxTQUFLSSxDQUFMLEdBQVNDLFFBQVFDLE9BQVIsRUFBVDtBQUNBLFNBQUtMLEdBQUwsR0FBV0EsR0FBWDtBQUNEOztBQUVETSxNQUFJQyxHQUFKLEVBQVM7QUFDUGIsVUFBTSxLQUFOLEVBQWFhLEdBQWI7QUFDQSxTQUFLSixDQUFMLEdBQVMsS0FBS0EsQ0FBTCxDQUFPSyxJQUFQLENBQVksTUFBTTtBQUN6QixhQUFPLElBQUlKLE9BQUosQ0FBYUMsT0FBRCxJQUFhO0FBQzlCLGFBQUtKLE1BQUwsQ0FBWUssR0FBWixDQUFnQkMsR0FBaEIsRUFBcUIsVUFBU0UsR0FBVCxFQUFjQyxHQUFkLEVBQW1CO0FBQ3RDaEIsZ0JBQU0sUUFBTixFQUFnQmEsR0FBaEIsRUFBcUJHLEdBQXJCO0FBQ0EsY0FBRyxDQUFDQSxHQUFKLEVBQVM7QUFDUCxtQkFBT0wsUUFBUSxJQUFSLENBQVA7QUFDRDtBQUNEQSxrQkFBUU0sS0FBS0MsS0FBTCxDQUFXRixHQUFYLENBQVI7QUFDRCxTQU5EO0FBT0QsT0FSTSxDQUFQO0FBU0QsS0FWUSxDQUFUO0FBV0EsV0FBTyxLQUFLUCxDQUFaO0FBQ0Q7O0FBRURVLE1BQUlOLEdBQUosRUFBU08sS0FBVCxFQUFnQmQsTUFBTSxLQUFLQSxHQUEzQixFQUFnQztBQUM5QmMsWUFBUUgsS0FBS0ksU0FBTCxDQUFlRCxLQUFmLENBQVI7QUFDQXBCLFVBQU0sS0FBTixFQUFhYSxHQUFiLEVBQWtCTyxLQUFsQixFQUF5QmQsR0FBekI7QUFDQSxRQUFJQSxRQUFRLENBQVosRUFBZTtBQUNiLGFBQU8sS0FBS0csQ0FBWixDQURhLENBQ0U7QUFDaEI7QUFDRCxRQUFJSCxNQUFNLENBQU4sSUFBV2dCLE1BQU1oQixHQUFOLENBQWYsRUFBMkI7QUFDekJBLFlBQU1QLGlCQUFOO0FBQ0Q7QUFDRCxTQUFLVSxDQUFMLEdBQVMsS0FBS0EsQ0FBTCxDQUFPSyxJQUFQLENBQVksTUFBTTtBQUN6QixhQUFPLElBQUlKLE9BQUosQ0FBYUMsT0FBRCxJQUFhO0FBQzlCLFlBQUlMLFFBQVFpQixRQUFaLEVBQXNCO0FBQ3BCLGVBQUtoQixNQUFMLENBQVlpQixHQUFaLENBQWdCWCxHQUFoQixFQUFxQk8sS0FBckIsRUFBNEIsWUFBVztBQUNyQ1Q7QUFDRCxXQUZEO0FBR0QsU0FKRCxNQUlPO0FBQ0wsZUFBS0osTUFBTCxDQUFZa0IsTUFBWixDQUFtQlosR0FBbkIsRUFBd0JQLEdBQXhCLEVBQTZCYyxLQUE3QixFQUFvQyxZQUFXO0FBQzdDVDtBQUNELFdBRkQ7QUFHRDtBQUNGLE9BVk0sQ0FBUDtBQVdELEtBWlEsQ0FBVDtBQWFBLFdBQU8sS0FBS0YsQ0FBWjtBQUNEOztBQUVEaUIsTUFBSWIsR0FBSixFQUFTO0FBQ1BiLFVBQU0sS0FBTixFQUFhYSxHQUFiO0FBQ0EsU0FBS0osQ0FBTCxHQUFTLEtBQUtBLENBQUwsQ0FBT0ssSUFBUCxDQUFZLE1BQU07QUFDekIsYUFBTyxJQUFJSixPQUFKLENBQWFDLE9BQUQsSUFBYTtBQUM5QixhQUFLSixNQUFMLENBQVltQixHQUFaLENBQWdCYixHQUFoQixFQUFxQixZQUFXO0FBQzlCRjtBQUNELFNBRkQ7QUFHRCxPQUpNLENBQVA7QUFLRCxLQU5RLENBQVQ7QUFPQSxXQUFPLEtBQUtGLENBQVo7QUFDRDs7QUFFRGtCLFVBQVE7QUFDTjNCLFVBQU0sT0FBTjtBQUNBLFNBQUtTLENBQUwsR0FBUyxLQUFLQSxDQUFMLENBQU9LLElBQVAsQ0FBWSxNQUFNO0FBQ3pCLGFBQU8sSUFBSUosT0FBSixDQUFhQyxPQUFELElBQWE7QUFDOUIsYUFBS0osTUFBTCxDQUFZcUIsT0FBWixDQUFvQixZQUFXO0FBQzdCakI7QUFDRCxTQUZEO0FBR0QsT0FKTSxDQUFQO0FBS0QsS0FOUSxDQUFUO0FBT0EsV0FBTyxLQUFLRixDQUFaO0FBQ0Q7QUF2RTRCOztRQUFsQk4saUIsR0FBQUEsaUI7a0JBMEVFQSxpQiIsImZpbGUiOiJSZWRpc0NhY2hlQWRhcHRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCByZWRpcyBmcm9tICdyZWRpcyc7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4uLy4uL2xvZ2dlcic7XG5cbmNvbnN0IERFRkFVTFRfUkVESVNfVFRMID0gMzAgKiAxMDAwOyAvLyAzMCBzZWNvbmRzIGluIG1pbGxpc2Vjb25kc1xuXG5mdW5jdGlvbiBkZWJ1ZygpIHtcbiAgbG9nZ2VyLmRlYnVnLmFwcGx5KGxvZ2dlciwgWydSZWRpc0NhY2hlQWRhcHRlcicsIC4uLmFyZ3VtZW50c10pO1xufVxuXG5leHBvcnQgY2xhc3MgUmVkaXNDYWNoZUFkYXB0ZXIge1xuXG4gIGNvbnN0cnVjdG9yKHJlZGlzQ3R4LCB0dGwgPSBERUZBVUxUX1JFRElTX1RUTCkge1xuICAgIHRoaXMuY2xpZW50ID0gcmVkaXMuY3JlYXRlQ2xpZW50KHJlZGlzQ3R4KTtcbiAgICB0aGlzLnAgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB0aGlzLnR0bCA9IHR0bDtcbiAgfVxuXG4gIGdldChrZXkpIHtcbiAgICBkZWJ1ZygnZ2V0Jywga2V5KTtcbiAgICB0aGlzLnAgPSB0aGlzLnAudGhlbigoKSA9PiB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgdGhpcy5jbGllbnQuZ2V0KGtleSwgZnVuY3Rpb24oZXJyLCByZXMpIHtcbiAgICAgICAgICBkZWJ1ZygnLT4gZ2V0Jywga2V5LCByZXMpO1xuICAgICAgICAgIGlmKCFyZXMpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKG51bGwpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXNvbHZlKEpTT04ucGFyc2UocmVzKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMucDtcbiAgfVxuXG4gIHB1dChrZXksIHZhbHVlLCB0dGwgPSB0aGlzLnR0bCkge1xuICAgIHZhbHVlID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgIGRlYnVnKCdwdXQnLCBrZXksIHZhbHVlLCB0dGwpO1xuICAgIGlmICh0dGwgPT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzLnA7IC8vIHR0bCBvZiB6ZXJvIGlzIGEgbG9naWNhbCBuby1vcCwgYnV0IHJlZGlzIGNhbm5vdCBzZXQgZXhwaXJlIHRpbWUgb2YgemVyb1xuICAgIH1cbiAgICBpZiAodHRsIDwgMCB8fCBpc05hTih0dGwpKSB7XG4gICAgICB0dGwgPSBERUZBVUxUX1JFRElTX1RUTDtcbiAgICB9XG4gICAgdGhpcy5wID0gdGhpcy5wLnRoZW4oKCkgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgIGlmICh0dGwgPT09IEluZmluaXR5KSB7XG4gICAgICAgICAgdGhpcy5jbGllbnQuc2V0KGtleSwgdmFsdWUsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuY2xpZW50LnBzZXRleChrZXksIHR0bCwgdmFsdWUsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5wO1xuICB9XG5cbiAgZGVsKGtleSkge1xuICAgIGRlYnVnKCdkZWwnLCBrZXkpO1xuICAgIHRoaXMucCA9IHRoaXMucC50aGVuKCgpID0+IHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICB0aGlzLmNsaWVudC5kZWwoa2V5LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMucDtcbiAgfVxuXG4gIGNsZWFyKCkge1xuICAgIGRlYnVnKCdjbGVhcicpO1xuICAgIHRoaXMucCA9IHRoaXMucC50aGVuKCgpID0+IHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICB0aGlzLmNsaWVudC5mbHVzaGRiKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5wO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlZGlzQ2FjaGVBZGFwdGVyO1xuIl19