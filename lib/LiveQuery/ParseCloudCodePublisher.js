'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ParseCloudCodePublisher = undefined;

var _ParsePubSub = require('./ParsePubSub');

var _node = require('parse/node');

var _node2 = _interopRequireDefault(_node);

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class ParseCloudCodePublisher {

  // config object of the publisher, right now it only contains the redisURL,
  // but we may extend it later.
  constructor(config = {}) {
    this.parsePublisher = _ParsePubSub.ParsePubSub.createPublisher(config);
  }

  onCloudCodeAfterSave(request) {
    this._onCloudCodeMessage(_node2.default.applicationId + 'afterSave', request);
  }

  onCloudCodeAfterDelete(request) {
    this._onCloudCodeMessage(_node2.default.applicationId + 'afterDelete', request);
  }

  // Request is the request object from cloud code functions. request.object is a ParseObject.
  _onCloudCodeMessage(type, request) {
    _logger2.default.verbose('Raw request from cloud code current : %j | original : %j', request.object, request.original);
    // We need the full JSON which includes className
    const message = {
      currentParseObject: request.object._toFullJSON()
    };
    if (request.original) {
      message.originalParseObject = request.original._toFullJSON();
    }
    this.parsePublisher.publish(type, JSON.stringify(message));
  }
}

exports.ParseCloudCodePublisher = ParseCloudCodePublisher;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9MaXZlUXVlcnkvUGFyc2VDbG91ZENvZGVQdWJsaXNoZXIuanMiXSwibmFtZXMiOlsiUGFyc2VDbG91ZENvZGVQdWJsaXNoZXIiLCJjb25zdHJ1Y3RvciIsImNvbmZpZyIsInBhcnNlUHVibGlzaGVyIiwiY3JlYXRlUHVibGlzaGVyIiwib25DbG91ZENvZGVBZnRlclNhdmUiLCJyZXF1ZXN0IiwiX29uQ2xvdWRDb2RlTWVzc2FnZSIsImFwcGxpY2F0aW9uSWQiLCJvbkNsb3VkQ29kZUFmdGVyRGVsZXRlIiwidHlwZSIsInZlcmJvc2UiLCJvYmplY3QiLCJvcmlnaW5hbCIsIm1lc3NhZ2UiLCJjdXJyZW50UGFyc2VPYmplY3QiLCJfdG9GdWxsSlNPTiIsIm9yaWdpbmFsUGFyc2VPYmplY3QiLCJwdWJsaXNoIiwiSlNPTiIsInN0cmluZ2lmeSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVBLE1BQU1BLHVCQUFOLENBQThCOztBQUc1QjtBQUNBO0FBQ0FDLGNBQVlDLFNBQWMsRUFBMUIsRUFBOEI7QUFDNUIsU0FBS0MsY0FBTCxHQUFzQix5QkFBWUMsZUFBWixDQUE0QkYsTUFBNUIsQ0FBdEI7QUFDRDs7QUFFREcsdUJBQXFCQyxPQUFyQixFQUF5QztBQUN2QyxTQUFLQyxtQkFBTCxDQUF5QixlQUFNQyxhQUFOLEdBQXNCLFdBQS9DLEVBQTRERixPQUE1RDtBQUNEOztBQUVERyx5QkFBdUJILE9BQXZCLEVBQTJDO0FBQ3pDLFNBQUtDLG1CQUFMLENBQXlCLGVBQU1DLGFBQU4sR0FBc0IsYUFBL0MsRUFBOERGLE9BQTlEO0FBQ0Q7O0FBRUQ7QUFDQUMsc0JBQW9CRyxJQUFwQixFQUFrQ0osT0FBbEMsRUFBc0Q7QUFDcEQscUJBQU9LLE9BQVAsQ0FBZSwwREFBZixFQUEyRUwsUUFBUU0sTUFBbkYsRUFBMkZOLFFBQVFPLFFBQW5HO0FBQ0E7QUFDQSxVQUFNQyxVQUFVO0FBQ2RDLDBCQUFvQlQsUUFBUU0sTUFBUixDQUFlSSxXQUFmO0FBRE4sS0FBaEI7QUFHQSxRQUFJVixRQUFRTyxRQUFaLEVBQXNCO0FBQ3BCQyxjQUFRRyxtQkFBUixHQUE4QlgsUUFBUU8sUUFBUixDQUFpQkcsV0FBakIsRUFBOUI7QUFDRDtBQUNELFNBQUtiLGNBQUwsQ0FBb0JlLE9BQXBCLENBQTRCUixJQUE1QixFQUFrQ1MsS0FBS0MsU0FBTCxDQUFlTixPQUFmLENBQWxDO0FBQ0Q7QUE1QjJCOztRQWdDNUJkLHVCLEdBQUFBLHVCIiwiZmlsZSI6IlBhcnNlQ2xvdWRDb2RlUHVibGlzaGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFyc2VQdWJTdWIgfSBmcm9tICcuL1BhcnNlUHViU3ViJztcbmltcG9ydCBQYXJzZSAgZnJvbSAncGFyc2Uvbm9kZSc7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4uL2xvZ2dlcic7XG5cbmNsYXNzIFBhcnNlQ2xvdWRDb2RlUHVibGlzaGVyIHtcbiAgcGFyc2VQdWJsaXNoZXI6IE9iamVjdDtcblxuICAvLyBjb25maWcgb2JqZWN0IG9mIHRoZSBwdWJsaXNoZXIsIHJpZ2h0IG5vdyBpdCBvbmx5IGNvbnRhaW5zIHRoZSByZWRpc1VSTCxcbiAgLy8gYnV0IHdlIG1heSBleHRlbmQgaXQgbGF0ZXIuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogYW55ID0ge30pIHtcbiAgICB0aGlzLnBhcnNlUHVibGlzaGVyID0gUGFyc2VQdWJTdWIuY3JlYXRlUHVibGlzaGVyKGNvbmZpZyk7XG4gIH1cblxuICBvbkNsb3VkQ29kZUFmdGVyU2F2ZShyZXF1ZXN0OiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLl9vbkNsb3VkQ29kZU1lc3NhZ2UoUGFyc2UuYXBwbGljYXRpb25JZCArICdhZnRlclNhdmUnLCByZXF1ZXN0KTtcbiAgfVxuXG4gIG9uQ2xvdWRDb2RlQWZ0ZXJEZWxldGUocmVxdWVzdDogYW55KTogdm9pZCB7XG4gICAgdGhpcy5fb25DbG91ZENvZGVNZXNzYWdlKFBhcnNlLmFwcGxpY2F0aW9uSWQgKyAnYWZ0ZXJEZWxldGUnLCByZXF1ZXN0KTtcbiAgfVxuXG4gIC8vIFJlcXVlc3QgaXMgdGhlIHJlcXVlc3Qgb2JqZWN0IGZyb20gY2xvdWQgY29kZSBmdW5jdGlvbnMuIHJlcXVlc3Qub2JqZWN0IGlzIGEgUGFyc2VPYmplY3QuXG4gIF9vbkNsb3VkQ29kZU1lc3NhZ2UodHlwZTogc3RyaW5nLCByZXF1ZXN0OiBhbnkpOiB2b2lkIHtcbiAgICBsb2dnZXIudmVyYm9zZSgnUmF3IHJlcXVlc3QgZnJvbSBjbG91ZCBjb2RlIGN1cnJlbnQgOiAlaiB8IG9yaWdpbmFsIDogJWonLCByZXF1ZXN0Lm9iamVjdCwgcmVxdWVzdC5vcmlnaW5hbCk7XG4gICAgLy8gV2UgbmVlZCB0aGUgZnVsbCBKU09OIHdoaWNoIGluY2x1ZGVzIGNsYXNzTmFtZVxuICAgIGNvbnN0IG1lc3NhZ2UgPSB7XG4gICAgICBjdXJyZW50UGFyc2VPYmplY3Q6IHJlcXVlc3Qub2JqZWN0Ll90b0Z1bGxKU09OKClcbiAgICB9XG4gICAgaWYgKHJlcXVlc3Qub3JpZ2luYWwpIHtcbiAgICAgIG1lc3NhZ2Uub3JpZ2luYWxQYXJzZU9iamVjdCA9IHJlcXVlc3Qub3JpZ2luYWwuX3RvRnVsbEpTT04oKTtcbiAgICB9XG4gICAgdGhpcy5wYXJzZVB1Ymxpc2hlci5wdWJsaXNoKHR5cGUsIEpTT04uc3RyaW5naWZ5KG1lc3NhZ2UpKTtcbiAgfVxufVxuXG5leHBvcnQge1xuICBQYXJzZUNsb3VkQ29kZVB1Ymxpc2hlclxufVxuIl19