'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isPushIncrementing = isPushIncrementing;
exports.getLocalesFromPush = getLocalesFromPush;
exports.transformPushBodyForLocale = transformPushBodyForLocale;
exports.stripLocalesFromBody = stripLocalesFromBody;
exports.bodiesPerLocales = bodiesPerLocales;
exports.groupByLocaleIdentifier = groupByLocaleIdentifier;
exports.validatePushType = validatePushType;
exports.applyDeviceTokenExists = applyDeviceTokenExists;

var _node = require('parse/node');

var _node2 = _interopRequireDefault(_node);

var _deepcopy = require('deepcopy');

var _deepcopy2 = _interopRequireDefault(_deepcopy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isPushIncrementing(body) {
  if (!body.data || !body.data.badge) {
    return false;
  }

  const badge = body.data.badge;
  if (typeof badge == 'string' && badge.toLowerCase() == "increment") {
    return true;
  }

  return typeof badge == 'object' && typeof badge.__op == 'string' && badge.__op.toLowerCase() == "increment" && Number(badge.amount);
}

const localizableKeys = ['alert', 'title'];

function getLocalesFromPush(body) {
  const data = body.data;
  if (!data) {
    return [];
  }
  return [...new Set(Object.keys(data).reduce((memo, key) => {
    localizableKeys.forEach(localizableKey => {
      if (key.indexOf(`${localizableKey}-`) == 0) {
        memo.push(key.slice(localizableKey.length + 1));
      }
    });
    return memo;
  }, []))];
}

function transformPushBodyForLocale(body, locale) {
  const data = body.data;
  if (!data) {
    return body;
  }
  body = (0, _deepcopy2.default)(body);
  localizableKeys.forEach(key => {
    const localeValue = body.data[`${key}-${locale}`];
    if (localeValue) {
      body.data[key] = localeValue;
    }
  });
  return stripLocalesFromBody(body);
}

function stripLocalesFromBody(body) {
  if (!body.data) {
    return body;
  }
  Object.keys(body.data).forEach(key => {
    localizableKeys.forEach(localizableKey => {
      if (key.indexOf(`${localizableKey}-`) == 0) {
        delete body.data[key];
      }
    });
  });
  return body;
}

function bodiesPerLocales(body, locales = []) {
  // Get all tranformed bodies for each locale
  const result = locales.reduce((memo, locale) => {
    memo[locale] = transformPushBodyForLocale(body, locale);
    return memo;
  }, {});
  // Set the default locale, with the stripped body
  result.default = stripLocalesFromBody(body);
  return result;
}

function groupByLocaleIdentifier(installations, locales = []) {
  return installations.reduce((map, installation) => {
    let added = false;
    locales.forEach(locale => {
      if (added) {
        return;
      }
      if (installation.localeIdentifier && installation.localeIdentifier.indexOf(locale) === 0) {
        added = true;
        map[locale] = map[locale] || [];
        map[locale].push(installation);
      }
    });
    if (!added) {
      map.default.push(installation);
    }
    return map;
  }, { default: [] });
}

/**
 * Check whether the deviceType parameter in qury condition is valid or not.
 * @param {Object} where A query condition
 * @param {Array} validPushTypes An array of valid push types(string)
 */
function validatePushType(where = {}, validPushTypes = []) {
  var deviceTypeField = where.deviceType || {};
  var deviceTypes = [];
  if (typeof deviceTypeField === 'string') {
    deviceTypes.push(deviceTypeField);
  } else if (Array.isArray(deviceTypeField['$in'])) {
    deviceTypes.concat(deviceTypeField['$in']);
  }
  for (var i = 0; i < deviceTypes.length; i++) {
    var deviceType = deviceTypes[i];
    if (validPushTypes.indexOf(deviceType) < 0) {
      throw new _node2.default.Error(_node2.default.Error.PUSH_MISCONFIGURED, deviceType + ' is not supported push type.');
    }
  }
}

function applyDeviceTokenExists(where) {
  where = (0, _deepcopy2.default)(where);
  if (!where.hasOwnProperty('deviceToken')) {
    where['deviceToken'] = { '$exists': true };
  }
  return where;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9QdXNoL3V0aWxzLmpzIl0sIm5hbWVzIjpbImlzUHVzaEluY3JlbWVudGluZyIsImdldExvY2FsZXNGcm9tUHVzaCIsInRyYW5zZm9ybVB1c2hCb2R5Rm9yTG9jYWxlIiwic3RyaXBMb2NhbGVzRnJvbUJvZHkiLCJib2RpZXNQZXJMb2NhbGVzIiwiZ3JvdXBCeUxvY2FsZUlkZW50aWZpZXIiLCJ2YWxpZGF0ZVB1c2hUeXBlIiwiYXBwbHlEZXZpY2VUb2tlbkV4aXN0cyIsImJvZHkiLCJkYXRhIiwiYmFkZ2UiLCJ0b0xvd2VyQ2FzZSIsIl9fb3AiLCJOdW1iZXIiLCJhbW91bnQiLCJsb2NhbGl6YWJsZUtleXMiLCJTZXQiLCJPYmplY3QiLCJrZXlzIiwicmVkdWNlIiwibWVtbyIsImtleSIsImZvckVhY2giLCJsb2NhbGl6YWJsZUtleSIsImluZGV4T2YiLCJwdXNoIiwic2xpY2UiLCJsZW5ndGgiLCJsb2NhbGUiLCJsb2NhbGVWYWx1ZSIsImxvY2FsZXMiLCJyZXN1bHQiLCJkZWZhdWx0IiwiaW5zdGFsbGF0aW9ucyIsIm1hcCIsImluc3RhbGxhdGlvbiIsImFkZGVkIiwibG9jYWxlSWRlbnRpZmllciIsIndoZXJlIiwidmFsaWRQdXNoVHlwZXMiLCJkZXZpY2VUeXBlRmllbGQiLCJkZXZpY2VUeXBlIiwiZGV2aWNlVHlwZXMiLCJBcnJheSIsImlzQXJyYXkiLCJjb25jYXQiLCJpIiwiRXJyb3IiLCJQVVNIX01JU0NPTkZJR1VSRUQiLCJoYXNPd25Qcm9wZXJ0eSJdLCJtYXBwaW5ncyI6Ijs7Ozs7UUFHZ0JBLGtCLEdBQUFBLGtCO1FBZ0JBQyxrQixHQUFBQSxrQjtRQWVBQywwQixHQUFBQSwwQjtRQWVBQyxvQixHQUFBQSxvQjtRQVlBQyxnQixHQUFBQSxnQjtRQVdBQyx1QixHQUFBQSx1QjtRQXlCQUMsZ0IsR0FBQUEsZ0I7UUFpQkFDLHNCLEdBQUFBLHNCOztBQWxIaEI7Ozs7QUFDQTs7Ozs7O0FBRU8sU0FBU1Asa0JBQVQsQ0FBNEJR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Z0IsS0FBaEIsQ0FBZCxDQUFKLEVBQTJDO0FBQ2hERSxnQkFBWUcsTUFBWixDQUFtQkwsZ0JBQWdCLEtBQWhCLENBQW5CO0FBQ0Q7QUFDRCxPQUFLLElBQUlNLElBQUksQ0FBYixFQUFnQkEsSUFBSUosWUFBWWYsTUFBaEMsRUFBd0NtQixHQUF4QyxFQUE2QztBQUMzQyxRQUFJTCxhQUFhQyxZQUFZSSxDQUFaLENBQWpCO0FBQ0EsUUFBSVAsZUFBZWYsT0FBZixDQUF1QmlCLFVBQXZCLElBQXFDLENBQXpDLEVBQTRDO0FBQzFDLFlBQU0sSUFBSSxlQUFNTSxLQUFWLENBQWdCLGVBQU1BLEtBQU4sQ0FBWUMsa0JBQTVCLEVBQ0pQLGFBQWEsOEJBRFQsQ0FBTjtBQUVEO0FBQ0Y7QUFDRjs7QUFFTSxTQUFTbEMsc0JBQVQsQ0FBZ0MrQixLQUFoQyxFQUF1QztBQUM1Q0EsVUFBUSx3QkFBU0EsS0FBVCxDQUFSO0FBQ0EsTUFBSSxDQUFDQSxNQUFNVyxjQUFOLENBQXFCLGFBQXJCLENBQUwsRUFBMEM7QUFDeENYLFVBQU0sYUFBTixJQUF1QixFQUFDLFdBQVcsSUFBWixFQUF2QjtBQUNEO0FBQ0QsU0FBT0EsS0FBUDtBQUNEIiwiZmlsZSI6InV0aWxzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFBhcnNlICAgIGZyb20gJ3BhcnNlL25vZGUnO1xuaW1wb3J0IGRlZXBjb3B5IGZyb20gJ2RlZXBjb3B5JztcblxuZXhwb3J0IGZ1bmN0aW9uIGlzUHVzaEluY3JlbWVudGluZyhib2R5KSB7XG4gIGlmICghYm9keS5kYXRhIHx8ICFib2R5LmRhdGEuYmFkZ2UpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBiYWRnZSA9IGJvZHkuZGF0YS5iYWRnZTtcbiAgaWYgKHR5cGVvZiBiYWRnZSA9PSAnc3RyaW5nJyAmJiBiYWRnZS50b0xvd2VyQ2FzZSgpID09IFwiaW5jcmVtZW50XCIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiB0eXBlb2YgYmFkZ2UgPT0gJ29iamVjdCcgJiYgdHlwZW9mIGJhZGdlLl9fb3AgPT0gJ3N0cmluZycgJiZcbiAgICAgICAgIGJhZGdlLl9fb3AudG9Mb3dlckNhc2UoKSA9PSBcImluY3JlbWVudFwiICYmIE51bWJlcihiYWRnZS5hbW91bnQpO1xufVxuXG5jb25zdCBsb2NhbGl6YWJsZUtleXMgPSBbJ2FsZXJ0JywgJ3RpdGxlJ107XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRMb2NhbGVzRnJvbVB1c2goYm9keSkge1xuICBjb25zdCBkYXRhID0gYm9keS5kYXRhO1xuICBpZiAoIWRhdGEpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgcmV0dXJuIFsuLi5uZXcgU2V0KE9iamVjdC5rZXlzKGRhdGEpLnJlZHVjZSgobWVtbywga2V5KSA9PiB7XG4gICAgbG9jYWxpemFibGVLZXlzLmZvckVhY2goKGxvY2FsaXphYmxlS2V5KSA9PiB7XG4gICAgICBpZiAoa2V5LmluZGV4T2YoYCR7bG9jYWxpemFibGVLZXl9LWApID09IDApIHtcbiAgICAgICAgbWVtby5wdXNoKGtleS5zbGljZShsb2NhbGl6YWJsZUtleS5sZW5ndGggKyAxKSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG1lbW87XG4gIH0sIFtdKSldO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtUHVzaEJvZHlGb3JMb2NhbGUoYm9keSwgbG9jYWxlKSB7XG4gIGNvbnN0IGRhdGEgPSBib2R5LmRhdGE7XG4gIGlmICghZGF0YSkge1xuICAgIHJldHVybiBib2R5O1xuICB9XG4gIGJvZHkgPSBkZWVwY29weShib2R5KTtcbiAgbG9jYWxpemFibGVLZXlzLmZvckVhY2goKGtleSkgPT4ge1xuICAgIGNvbnN0IGxvY2FsZVZhbHVlID0gYm9keS5kYXRhW2Ake2tleX0tJHtsb2NhbGV9YF07XG4gICAgaWYgKGxvY2FsZVZhbHVlKSB7XG4gICAgICBib2R5LmRhdGFba2V5XSA9IGxvY2FsZVZhbHVlO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBzdHJpcExvY2FsZXNGcm9tQm9keShib2R5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0cmlwTG9jYWxlc0Zyb21Cb2R5KGJvZHkpIHtcbiAgaWYgKCFib2R5LmRhdGEpIHsgcmV0dXJuIGJvZHk7IH1cbiAgT2JqZWN0LmtleXMoYm9keS5kYXRhKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBsb2NhbGl6YWJsZUtleXMuZm9yRWFjaCgobG9jYWxpemFibGVLZXkpID0+IHtcbiAgICAgIGlmIChrZXkuaW5kZXhPZihgJHtsb2NhbGl6YWJsZUtleX0tYCkgPT0gMCkge1xuICAgICAgICBkZWxldGUgYm9keS5kYXRhW2tleV07XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gYm9keTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJvZGllc1BlckxvY2FsZXMoYm9keSwgbG9jYWxlcyA9IFtdKSB7XG4gIC8vIEdldCBhbGwgdHJhbmZvcm1lZCBib2RpZXMgZm9yIGVhY2ggbG9jYWxlXG4gIGNvbnN0IHJlc3VsdCA9IGxvY2FsZXMucmVkdWNlKChtZW1vLCBsb2NhbGUpID0+IHtcbiAgICBtZW1vW2xvY2FsZV0gPSB0cmFuc2Zvcm1QdXNoQm9keUZvckxvY2FsZShib2R5LCBsb2NhbGUpO1xuICAgIHJldHVybiBtZW1vO1xuICB9LCB7fSk7XG4gIC8vIFNldCB0aGUgZGVmYXVsdCBsb2NhbGUsIHdpdGggdGhlIHN0cmlwcGVkIGJvZHlcbiAgcmVzdWx0LmRlZmF1bHQgPSBzdHJpcExvY2FsZXNGcm9tQm9keShib2R5KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdyb3VwQnlMb2NhbGVJZGVudGlmaWVyKGluc3RhbGxhdGlvbnMsIGxvY2FsZXMgPSBbXSkge1xuICByZXR1cm4gaW5zdGFsbGF0aW9ucy5yZWR1Y2UoKG1hcCwgaW5zdGFsbGF0aW9uKSA9PiB7XG4gICAgbGV0IGFkZGVkID0gZmFsc2U7XG4gICAgbG9jYWxlcy5mb3JFYWNoKChsb2NhbGUpID0+IHtcbiAgICAgIGlmIChhZGRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoaW5zdGFsbGF0aW9uLmxvY2FsZUlkZW50aWZpZXIgJiYgaW5zdGFsbGF0aW9uLmxvY2FsZUlkZW50aWZpZXIuaW5kZXhPZihsb2NhbGUpID09PSAwKSB7XG4gICAgICAgIGFkZGVkID0gdHJ1ZTtcbiAgICAgICAgbWFwW2xvY2FsZV0gPSBtYXBbbG9jYWxlXSB8fCBbXTtcbiAgICAgICAgbWFwW2xvY2FsZV0ucHVzaChpbnN0YWxsYXRpb24pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICghYWRkZWQpIHtcbiAgICAgIG1hcC5kZWZhdWx0LnB1c2goaW5zdGFsbGF0aW9uKTtcbiAgICB9XG4gICAgcmV0dXJuIG1hcDtcbiAgfSwge2RlZmF1bHQ6IFtdfSk7XG59XG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciB0aGUgZGV2aWNlVHlwZSBwYXJhbWV0ZXIgaW4gcXVyeSBjb25kaXRpb24gaXMgdmFsaWQgb3Igbm90LlxuICogQHBhcmFtIHtPYmplY3R9IHdoZXJlIEEgcXVlcnkgY29uZGl0aW9uXG4gKiBAcGFyYW0ge0FycmF5fSB2YWxpZFB1c2hUeXBlcyBBbiBhcnJheSBvZiB2YWxpZCBwdXNoIHR5cGVzKHN0cmluZylcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlUHVzaFR5cGUod2hlcmUgPSB7fSwgdmFsaWRQdXNoVHlwZXMgPSBbXSkge1xuICB2YXIgZGV2aWNlVHlwZUZpZWxkID0gd2hlcmUuZGV2aWNlVHlwZSB8fCB7fTtcbiAgdmFyIGRldmljZVR5cGVzID0gW107XG4gIGlmICh0eXBlb2YgZGV2aWNlVHlwZUZpZWxkID09PSAnc3RyaW5nJykge1xuICAgIGRldmljZVR5cGVzLnB1c2goZGV2aWNlVHlwZUZpZWxkKTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGRldmljZVR5cGVGaWVsZFsnJGluJ10pKSB7XG4gICAgZGV2aWNlVHlwZXMuY29uY2F0KGRldmljZVR5cGVGaWVsZFsnJGluJ10pO1xuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZGV2aWNlVHlwZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGV2aWNlVHlwZSA9IGRldmljZVR5cGVzW2ldO1xuICAgIGlmICh2YWxpZFB1c2hUeXBlcy5pbmRleE9mKGRldmljZVR5cGUpIDwgMCkge1xuICAgICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFBhcnNlLkVycm9yLlBVU0hfTUlTQ09ORklHVVJFRCxcbiAgICAgICAgZGV2aWNlVHlwZSArICcgaXMgbm90IHN1cHBvcnRlZCBwdXNoIHR5cGUuJyk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBseURldmljZVRva2VuRXhpc3RzKHdoZXJlKSB7XG4gIHdoZXJlID0gZGVlcGNvcHkod2hlcmUpO1xuICBpZiAoIXdoZXJlLmhhc093blByb3BlcnR5KCdkZXZpY2VUb2tlbicpKSB7XG4gICAgd2hlcmVbJ2RldmljZVRva2VuJ10gPSB7JyRleGlzdHMnOiB0cnVlfTtcbiAgfVxuICByZXR1cm4gd2hlcmU7XG59XG4iXX0=