'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logger = undefined;
exports.configureLogger = configureLogger;
exports.addTransport = addTransport;
exports.removeTransport = removeTransport;

var _winston = require('winston');

var _winston2 = _interopRequireDefault(_winston);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _winstonDailyRotateFile = require('winston-daily-rotate-file');

var _winstonDailyRotateFile2 = _interopRequireDefault(_winstonDailyRotateFile);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _defaults = require('../../defaults');

var _defaults2 = _interopRequireDefault(_defaults);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const logger = new _winston2.default.Logger();
const additionalTransports = [];

function updateTransports(options) {
  const transports = Object.assign({}, logger.transports);
  if (options) {
    const silent = options.silent;
    delete options.silent;
    if (_lodash2.default.isNull(options.dirname)) {
      delete transports['parse-server'];
      delete transports['parse-server-error'];
    } else if (!_lodash2.default.isUndefined(options.dirname)) {
      transports['parse-server'] = new _winstonDailyRotateFile2.default(Object.assign({}, {
        filename: 'parse-server.info',
        name: 'parse-server'
      }, options, { timestamp: true }));
      transports['parse-server-error'] = new _winstonDailyRotateFile2.default(Object.assign({}, {
        filename: 'parse-server.err',
        name: 'parse-server-error'
      }, options, { level: 'error', timestamp: true }));
    }

    transports.console = new _winston2.default.transports.Console(Object.assign({
      colorize: true,
      name: 'console',
      silent
    }, options));
  }
  // Mount the additional transports
  additionalTransports.forEach(transport => {
    transports[transport.name] = transport;
  });
  logger.configure({
    transports: _lodash2.default.values(transports)
  });
}

function configureLogger({
  logsFolder = _defaults2.default.logsFolder,
  jsonLogs = _defaults2.default.jsonLogs,
  logLevel = _winston2.default.level,
  verbose = _defaults2.default.verbose,
  silent = _defaults2.default.silent } = {}) {

  if (verbose) {
    logLevel = 'verbose';
  }

  _winston2.default.level = logLevel;
  const options = {};

  if (logsFolder) {
    if (!_path2.default.isAbsolute(logsFolder)) {
      logsFolder = _path2.default.resolve(process.cwd(), logsFolder);
    }
    try {
      _fs2.default.mkdirSync(logsFolder);
    } catch (e) {/* */}
  }
  options.dirname = logsFolder;
  options.level = logLevel;
  options.silent = silent;

  if (jsonLogs) {
    options.json = true;
    options.stringify = true;
  }
  updateTransports(options);
}

function addTransport(transport) {
  additionalTransports.push(transport);
  updateTransports();
}

function removeTransport(transport) {
  const transportName = typeof transport == 'string' ? transport : transport.name;
  const transports = Object.assign({}, logger.transports);
  delete transports[transportName];
  logger.configure({
    transports: _lodash2.default.values(transports)
  });
  _lodash2.default.remove(additionalTransports, transport => {
    return transport.name === transportName;
  });
}

exports.logger = logger;
exports.default = logger;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9BZGFwdGVycy9Mb2dnZXIvV2luc3RvbkxvZ2dlci5qcyJdLCJuYW1lcyI6WyJjb25maWd1cmVMb2dnZXIiLCJhZGRUcmFuc3BvcnQiLCJyZW1vdmVUcmFuc3BvcnQiLCJsb2dnZXIiLCJMb2dnZXIiLCJhZGRpdGlvbmFsVHJhbnNwb3J0cyIsInVwZGF0ZVRyYW5zcG9ydHMiLCJvcHRpb25zIiwidHJhbnNwb3J0cyIsIk9iamVjdCIsImFzc2lnbiIsInNpbGVudCIsImlzTnVsbCIsImRpcm5hbWUiLCJpc1VuZGVmaW5lZCIsImZpbGVuYW1lIiwibmFtZSIsInRpbWVzdGFtcCIsImxldmVsIiwiY29uc29sZSIsIkNvbnNvbGUiLCJjb2xvcml6ZSIsImZvckVhY2giLCJ0cmFuc3BvcnQiLCJjb25maWd1cmUiLCJ2YWx1ZXMiLCJsb2dzRm9sZGVyIiwianNvbkxvZ3MiLCJsb2dMZXZlbCIsInZlcmJvc2UiLCJpc0Fic29sdXRlIiwicmVzb2x2ZSIsInByb2Nlc3MiLCJjd2QiLCJta2RpclN5bmMiLCJlIiwianNvbiIsInN0cmluZ2lmeSIsInB1c2giLCJ0cmFuc3BvcnROYW1lIiwicmVtb3ZlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7UUErQ2dCQSxlLEdBQUFBLGU7UUFpQ0FDLFksR0FBQUEsWTtRQUtBQyxlLEdBQUFBLGU7O0FBckZoQjs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVBLE1BQU1DLFNBQVMsSUFBSSxrQkFBUUMsTUFBWixFQUFmO0FBQ0EsTUFBTUMsdUJBQXVCLEVBQTdCOztBQUVBLFNBQVNDLGdCQUFULENBQTBCQyxPQUExQixFQUFtQztBQUNqQyxRQUFNQyxhQUFhQyxPQUFPQyxNQUFQLENBQWMsRUFBZCxFQUFrQlAsT0FBT0ssVUFBekIsQ0FBbkI7QUFDQSxNQUFJRCxPQUFKLEVBQWE7QUFDWCxVQUFNSSxTQUFTSixRQUFRSSxNQUF2QjtBQUNBLFdBQU9KLFFBQVFJLE1BQWY7QUFD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QUFDQXBDLFNBQU9xQixTQUFQLENBQWlCO0FBQ2ZoQixnQkFBWSxpQkFBRWlCLE1BQUYsQ0FBU2pCLFVBQVQ7QUFERyxHQUFqQjtBQUdBLG1CQUFFZ0MsTUFBRixDQUFTbkMsb0JBQVQsRUFBZ0NrQixTQUFELElBQWU7QUFDNUMsV0FBT0EsVUFBVVAsSUFBVixLQUFtQnVCLGFBQTFCO0FBQ0QsR0FGRDtBQUdEOztRQUVRcEMsTSxHQUFBQSxNO2tCQUNNQSxNIiwiZmlsZSI6IldpbnN0b25Mb2dnZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgd2luc3RvbiBmcm9tICd3aW5zdG9uJztcbmltcG9ydCBmcyBmcm9tICdmcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBEYWlseVJvdGF0ZUZpbGUgZnJvbSAnd2luc3Rvbi1kYWlseS1yb3RhdGUtZmlsZSc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IGRlZmF1bHRzICBmcm9tICcuLi8uLi9kZWZhdWx0cyc7XG5cbmNvbnN0IGxvZ2dlciA9IG5ldyB3aW5zdG9uLkxvZ2dlcigpO1xuY29uc3QgYWRkaXRpb25hbFRyYW5zcG9ydHMgPSBbXTtcblxuZnVuY3Rpb24gdXBkYXRlVHJhbnNwb3J0cyhvcHRpb25zKSB7XG4gIGNvbnN0IHRyYW5zcG9ydHMgPSBPYmplY3QuYXNzaWduKHt9LCBsb2dnZXIudHJhbnNwb3J0cyk7XG4gIGlmIChvcHRpb25zKSB7XG4gICAgY29uc3Qgc2lsZW50ID0gb3B0aW9ucy5zaWxlbnQ7XG4gICAgZGVsZXRlIG9wdGlvbnMuc2lsZW50O1xuICAgIGlmIChfLmlzTnVsbChvcHRpb25zLmRpcm5hbWUpKSB7XG4gICAgICBkZWxldGUgdHJhbnNwb3J0c1sncGFyc2Utc2VydmVyJ107XG4gICAgICBkZWxldGUgdHJhbnNwb3J0c1sncGFyc2Utc2VydmVyLWVycm9yJ107XG4gICAgfSBlbHNlIGlmICghXy5pc1VuZGVmaW5lZChvcHRpb25zLmRpcm5hbWUpKSB7XG4gICAgICB0cmFuc3BvcnRzWydwYXJzZS1zZXJ2ZXInXSA9IG5ldyAoRGFpbHlSb3RhdGVGaWxlKShcbiAgICAgICAgT2JqZWN0LmFzc2lnbih7fSwge1xuICAgICAgICAgIGZpbGVuYW1lOiAncGFyc2Utc2VydmVyLmluZm8nLFxuICAgICAgICAgIG5hbWU6ICdwYXJzZS1zZXJ2ZXInLFxuICAgICAgICB9LCBvcHRpb25zLCB7IHRpbWVzdGFtcDogdHJ1ZSB9KSk7XG4gICAgICB0cmFuc3BvcnRzWydwYXJzZS1zZXJ2ZXItZXJyb3InXSA9IG5ldyAoRGFpbHlSb3RhdGVGaWxlKShcbiAgICAgICAgT2JqZWN0LmFzc2lnbih7fSwge1xuICAgICAgICAgIGZpbGVuYW1lOiAncGFyc2Utc2VydmVyLmVycicsXG4gICAgICAgICAgbmFtZTogJ3BhcnNlLXNlcnZlci1lcnJvcicsXG4gICAgICAgIH0sIG9wdGlvbnMsIHsgbGV2ZWw6ICdlcnJvcicsIHRpbWVzdGFtcDogdHJ1ZSAgfSkpO1xuICAgIH1cblxuICAgIHRyYW5zcG9ydHMuY29uc29sZSA9IG5ldyAod2luc3Rvbi50cmFuc3BvcnRzLkNvbnNvbGUpKFxuICAgICAgT2JqZWN0LmFzc2lnbih7XG4gICAgICAgIGNvbG9yaXplOiB0cnVlLFxuICAgICAgICBuYW1lOiAnY29uc29sZScsXG4gICAgICAgIHNpbGVudFxuICAgICAgfSwgb3B0aW9ucykpO1xuICB9XG4gIC8vIE1vdW50IHRoZSBhZGRpdGlvbmFsIHRyYW5zcG9ydHNcbiAgYWRkaXRpb25hbFRyYW5zcG9ydHMuZm9yRWFjaCgodHJhbnNwb3J0KSA9PiB7XG4gICAgdHJhbnNwb3J0c1t0cmFuc3BvcnQubmFtZV0gPSB0cmFuc3BvcnQ7XG4gIH0pO1xuICBsb2dnZXIuY29uZmlndXJlKHtcbiAgICB0cmFuc3BvcnRzOiBfLnZhbHVlcyh0cmFuc3BvcnRzKVxuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbmZpZ3VyZUxvZ2dlcih7XG4gIGxvZ3NGb2xkZXIgPSBkZWZhdWx0cy5sb2dzRm9sZGVyLFxuICBqc29uTG9ncyA9IGRlZmF1bHRzLmpzb25Mb2dzLFxuICBsb2dMZXZlbCA9IHdpbnN0b24ubGV2ZWwsXG4gIHZlcmJvc2UgPSBkZWZhdWx0cy52ZXJib3NlLFxuICBzaWxlbnQgPSBkZWZhdWx0cy5zaWxlbnQgfSA9IHt9KSB7XG5cbiAgaWYgKHZlcmJvc2UpIHtcbiAgICBsb2dMZXZlbCA9ICd2ZXJib3NlJztcbiAgfVxuXG4gIHdpbnN0b24ubGV2ZWwgPSBsb2dMZXZlbDtcbiAgY29uc3Qgb3B0aW9ucyA9IHt9O1xuXG4gIGlmIChsb2dzRm9sZGVyKSB7XG4gICAgaWYgKCFwYXRoLmlzQWJzb2x1dGUobG9nc0ZvbGRlcikpIHtcbiAgICAgIGxvZ3NGb2xkZXIgPSBwYXRoLnJlc29sdmUocHJvY2Vzcy5jd2QoKSwgbG9nc0ZvbGRlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBmcy5ta2RpclN5bmMobG9nc0ZvbGRlcik7XG4gICAgfSBjYXRjaCAoZSkgeyAvKiAqLyB9XG4gIH1cbiAgb3B0aW9ucy5kaXJuYW1lID0gbG9nc0ZvbGRlcjtcbiAgb3B0aW9ucy5sZXZlbCA9IGxvZ0xldmVsO1xuICBvcHRpb25zLnNpbGVudCA9IHNpbGVudDtcblxuICBpZiAoanNvbkxvZ3MpIHtcbiAgICBvcHRpb25zLmpzb24gPSB0cnVlO1xuICAgIG9wdGlvbnMuc3RyaW5naWZ5ID0gdHJ1ZTtcbiAgfVxuICB1cGRhdGVUcmFuc3BvcnRzKG9wdGlvbnMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkVHJhbnNwb3J0KHRyYW5zcG9ydCkge1xuICBhZGRpdGlvbmFsVHJhbnNwb3J0cy5wdXNoKHRyYW5zcG9ydCk7XG4gIHVwZGF0ZVRyYW5zcG9ydHMoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZVRyYW5zcG9ydCh0cmFuc3BvcnQpIHtcbiAgY29uc3QgdHJhbnNwb3J0TmFtZSA9IHR5cGVvZiB0cmFuc3BvcnQgPT0gJ3N0cmluZycgPyB0cmFuc3BvcnQgOiB0cmFuc3BvcnQubmFtZTtcbiAgY29uc3QgdHJhbnNwb3J0cyA9IE9iamVjdC5hc3NpZ24oe30sIGxvZ2dlci50cmFuc3BvcnRzKTtcbiAgZGVsZXRlIHRyYW5zcG9ydHNbdHJhbnNwb3J0TmFtZV07XG4gIGxvZ2dlci5jb25maWd1cmUoe1xuICAgIHRyYW5zcG9ydHM6IF8udmFsdWVzKHRyYW5zcG9ydHMpXG4gIH0pO1xuICBfLnJlbW92ZShhZGRpdGlvbmFsVHJhbnNwb3J0cywgKHRyYW5zcG9ydCkgPT4ge1xuICAgIHJldHVybiB0cmFuc3BvcnQubmFtZSA9PT0gdHJhbnNwb3J0TmFtZTtcbiAgfSk7XG59XG5cbmV4cG9ydCB7IGxvZ2dlciB9O1xuZXhwb3J0IGRlZmF1bHQgbG9nZ2VyO1xuIl19