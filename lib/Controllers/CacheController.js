'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CacheController = exports.SubCache = undefined;

var _AdaptableController = require('./AdaptableController');

var _AdaptableController2 = _interopRequireDefault(_AdaptableController);

var _CacheAdapter = require('../Adapters/Cache/CacheAdapter');

var _CacheAdapter2 = _interopRequireDefault(_CacheAdapter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const KEY_SEPARATOR_CHAR = ':';

function joinKeys(...keys) {
  return keys.join(KEY_SEPARATOR_CHAR);
}

/**
 * Prefix all calls to the cache via a prefix string, useful when grouping Cache by object type.
 *
 * eg "Role" or "Session"
 */
class SubCache {
  constructor(prefix, cacheController, ttl) {
    this.prefix = prefix;
    this.cache = cacheController;
    this.ttl = ttl;
  }

  get(key) {
    const cacheKey = joinKeys(this.prefix, key);
    return this.cache.get(cacheKey);
  }

  put(key, value, ttl) {
    const cacheKey = joinKeys(this.prefix, key);
    return this.cache.put(cacheKey, value, ttl);
  }

  del(key) {
    const cacheKey = joinKeys(this.prefix, key);
    return this.cache.del(cacheKey);
  }

  clear() {
    return this.cache.clear();
  }
}

exports.SubCache = SubCache;
class CacheController extends _AdaptableController2.default {

  constructor(adapter, appId, options = {}) {
    super(adapter, appId, options);

    this.role = new SubCache('role', this);
    this.user = new SubCache('user', this);
  }

  get(key) {
    const cacheKey = joinKeys(this.appId, key);
    return this.adapter.get(cacheKey).then(null, () => Promise.resolve(null));
  }

  put(key, value, ttl) {
    const cacheKey = joinKeys(this.appId, key);
    return this.adapter.put(cacheKey, value, ttl);
  }

  del(key) {
    const cacheKey = joinKeys(this.appId, key);
    return this.adapter.del(cacheKey);
  }

  clear() {
    return this.adapter.clear();
  }

  expectedAdapterType() {
    return _CacheAdapter2.default;
  }
}

exports.CacheController = CacheController;
exports.default = CacheController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Db250cm9sbGVycy9DYWNoZUNvbnRyb2xsZXIuanMiXSwibmFtZXMiOlsiS0VZX1NFUEFSQVRPUl9DSEFSIiwiam9pbktleXMiLCJrZXlzIiwiam9pbiIsIlN1YkNhY2hlIiwiY29uc3RydWN0b3IiLCJwcmVmaXgiLCJjYWNoZUNvbnRyb2xsZXIiLCJ0dGwiLCJjYWNoZSIsImdldCIsImtleSIsImNhY2hlS2V5IiwicHV0IiwidmFsdWUiLCJkZWwiLCJjbGVhciIsIkNhY2hlQ29udHJvbGxlciIsImFkYXB0ZXIiLCJhcHBJZCIsIm9wdGlvbnMiLCJyb2xlIiwidXNlciIsInRoZW4iLCJQcm9taXNlIiwicmVzb2x2ZSIsImV4cGVjdGVkQWRhcHRlclR5cGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7OztBQUNBOzs7Ozs7QUFFQSxNQUFNQSxxQkFBcUIsR0FBM0I7O0FBRUEsU0FBU0MsUUFBVCxDQUFrQixHQUFHQyxJQUFyQixFQUEyQjtBQUN6QixTQUFPQSxLQUFLQyxJQUFMLENBQVVILGtCQUFWLENBQVA7QUFDRDs7QUFFRDs7Ozs7QUFLTyxNQUFNSSxRQUFOLENBQWU7QUFDcEJDLGNBQVlDLE1BQVosRUFBb0JDLGVBQXBCLEVBQXFDQyxHQUFyQyxFQUEwQztBQUN4QyxTQUFLRixNQUFMLEdBQWNBLE1BQWQ7QUFDQSxTQUFLRyxLQUFMLEdBQWFGLGVBQWI7QUFDQSxTQUFLQyxHQUFMLEdBQVdBLEdBQVg7QUFDRDs7QUFFREUsTUFBSUMsR0FBSixFQUFTO0FBQ1AsVUFBTUMsV0FBV1gsU0FBUyxLQUFLSyxNQUFkLEVBQXNCSyxHQUF0QixDQUFqQjtBQUNBLFdBQU8sS0FBS0YsS0FBTCxDQUFXQyxHQUFYLENBQWVFLFFBQWYsQ0FBUDtBQUNEOztBQUVEQyxNQUFJRixHQUFKLEVBQVNHLEtBQVQsRUFBZ0JOLEdBQWhCLEVBQXFCO0FBQ25CLFVBQU1JLFdBQVdYLFNBQVMsS0FBS0ssTUFBZCxFQUFzQkssR0FBdEIsQ0FBakI7QUFDQSxXQUFPLEtBQUtGLEtBQUwsQ0FBV0ksR0FBWCxDQUFlRCxRQUFmLEVBQXlCRSxLQUF6QixFQUFnQ04sR0FBaEMsQ0FBUDtBQUNEOztBQUVETyxNQUFJSixHQUFKLEVBQVM7QUFDUCxVQUFNQyxXQUFXWCxTQUFTLEtBQUtLLE1BQWQsRUFBc0JLLEdBQXRCLENBQWpCO0FBQ0EsV0FBTyxLQUFLRixLQUFMLENBQVdNLEdBQVgsQ0FBZUgsUUFBZixDQUFQO0FBQ0Q7O0FBRURJLFVBQVE7QUFDTixXQUFPLEtBQUtQLEtBQUwsQ0FBV08sS0FBWCxFQUFQO0FBQ0Q7QUF4Qm1COztRQUFUWixRLEdBQUFBLFE7QUE0Qk4sTUFBTWEsZUFBTix1Q0FBa0Q7O0FBRXZEWixjQUFZYSxPQUFaLEVBQXFCQyxLQUFyQixFQUE0QkMsVUFBVSxFQUF0QyxFQUEwQztBQUN4QyxVQUFNRixPQUFOLEVBQWVDLEtBQWYsRUFBc0JDLE9BQXRCOztBQUVBLFNBQUtDLElBQUwsR0FBWSxJQUFJakIsUUFBSixDQUFhLE1BQWIsRUFBcUIsSUFBckIsQ0FBWjtBQUNBLFNBQUtrQixJQUFMLEdBQVksSUFBSWxCLFFBQUosQ0FBYSxNQUFiLEVBQXFCLElBQXJCLENBQVo7QUFDRDs7QUFFRE0sTUFBSUMsR0FBSixFQUFTO0FBQ1AsVUFBTUMsV0FBV1gsU0FBUyxLQUFLa0IsS0FBZCxFQUFxQlIsR0FBckIsQ0FBakI7QUFDQSxXQUFPLEtBQUtPLE9BQUwsQ0FBYVIsR0FBYixDQUFpQkUsUUFBakIsRUFBMkJXLElBQTNCLENBQWdDLElBQWhDLEVBQXNDLE1BQU1DLFFBQVFDLE9BQVIsQ0FBZ0IsSUFBaEIsQ0FBNUMsQ0FBUDtBQUNEOztBQUVEWixNQUFJRixHQUFKLEVBQVNHLEtBQVQsRUFBZ0JOLEdBQWhCLEVBQXFCO0FBQ25CLFVBQU1JLFdBQVdYLFNBQVMsS0FBS2tCLEtBQWQsRUFBcUJSLEdBQXJCLENBQWpCO0FBQ0EsV0FBTyxLQUFLTyxPQUFMLENBQWFMLEdBQWIsQ0FBaUJELFFBQWpCLEVBQTJCRSxLQUEzQixFQUFrQ04sR0FBbEMsQ0FBUDtBQUNEOztBQUVETyxNQUFJSixHQUFKLEVBQVM7QUFDUCxVQUFNQyxXQUFXWCxTQUFTLEtBQUtrQixLQUFkLEVBQXFCUixHQUFyQixDQUFqQjtBQUNBLFdBQU8sS0FBS08sT0FBTCxDQUFhSCxHQUFiLENBQWlCSCxRQUFqQixDQUFQO0FBQ0Q7O0FBRURJLFVBQVE7QUFDTixXQUFPLEtBQUtFLE9BQUwsQ0FBYUYsS0FBYixFQUFQO0FBQ0Q7O0FBRURVLHdCQUFzQjtBQUNwQjtBQUNEO0FBOUJzRDs7UUFBNUNULGUsR0FBQUEsZTtrQkFpQ0VBLGUiLCJmaWxlIjoiQ2FjaGVDb250cm9sbGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEFkYXB0YWJsZUNvbnRyb2xsZXIgZnJvbSAnLi9BZGFwdGFibGVDb250cm9sbGVyJztcbmltcG9ydCBDYWNoZUFkYXB0ZXIgICAgICAgIGZyb20gJy4uL0FkYXB0ZXJzL0NhY2hlL0NhY2hlQWRhcHRlcic7XG5cbmNvbnN0IEtFWV9TRVBBUkFUT1JfQ0hBUiA9ICc6JztcblxuZnVuY3Rpb24gam9pbktleXMoLi4ua2V5cykge1xuICByZXR1cm4ga2V5cy5qb2luKEtFWV9TRVBBUkFUT1JfQ0hBUik7XG59XG5cbi8qKlxuICogUHJlZml4IGFsbCBjYWxscyB0byB0aGUgY2FjaGUgdmlhIGEgcHJlZml4IHN0cmluZywgdXNlZnVsIHdoZW4gZ3JvdXBpbmcgQ2FjaGUgYnkgb2JqZWN0IHR5cGUuXG4gKlxuICogZWcgXCJSb2xlXCIgb3IgXCJTZXNzaW9uXCJcbiAqL1xuZXhwb3J0IGNsYXNzIFN1YkNhY2hlIHtcbiAgY29uc3RydWN0b3IocHJlZml4LCBjYWNoZUNvbnRyb2xsZXIsIHR0bCkge1xuICAgIHRoaXMucHJlZml4ID0gcHJlZml4O1xuICAgIHRoaXMuY2FjaGUgPSBjYWNoZUNvbnRyb2xsZXI7XG4gICAgdGhpcy50dGwgPSB0dGw7XG4gIH1cblxuICBnZXQoa2V5KSB7XG4gICAgY29uc3QgY2FjaGVLZXkgPSBqb2luS2V5cyh0aGlzLnByZWZpeCwga2V5KTtcbiAgICByZXR1cm4gdGhpcy5jYWNoZS5nZXQoY2FjaGVLZXkpO1xuICB9XG5cbiAgcHV0KGtleSwgdmFsdWUsIHR0bCkge1xuICAgIGNvbnN0IGNhY2hlS2V5ID0gam9pbktleXModGhpcy5wcmVmaXgsIGtleSk7XG4gICAgcmV0dXJuIHRoaXMuY2FjaGUucHV0KGNhY2hlS2V5LCB2YWx1ZSwgdHRsKTtcbiAgfVxuXG4gIGRlbChrZXkpIHtcbiAgICBjb25zdCBjYWNoZUtleSA9IGpvaW5LZXlzKHRoaXMucHJlZml4LCBrZXkpO1xuICAgIHJldHVybiB0aGlzLmNhY2hlLmRlbChjYWNoZUtleSk7XG4gIH1cblxuICBjbGVhcigpIHtcbiAgICByZXR1cm4gdGhpcy5jYWNoZS5jbGVhcigpO1xuICB9XG59XG5cblxuZXhwb3J0IGNsYXNzIENhY2hlQ29udHJvbGxlciBleHRlbmRzIEFkYXB0YWJsZUNvbnRyb2xsZXIge1xuXG4gIGNvbnN0cnVjdG9yKGFkYXB0ZXIsIGFwcElkLCBvcHRpb25zID0ge30pIHtcbiAgICBzdXBlcihhZGFwdGVyLCBhcHBJZCwgb3B0aW9ucyk7XG5cbiAgICB0aGlzLnJvbGUgPSBuZXcgU3ViQ2FjaGUoJ3JvbGUnLCB0aGlzKTtcbiAgICB0aGlzLnVzZXIgPSBuZXcgU3ViQ2FjaGUoJ3VzZXInLCB0aGlzKTtcbiAgfVxuXG4gIGdldChrZXkpIHtcbiAgICBjb25zdCBjYWNoZUtleSA9IGpvaW5LZXlzKHRoaXMuYXBwSWQsIGtleSk7XG4gICAgcmV0dXJuIHRoaXMuYWRhcHRlci5nZXQoY2FjaGVLZXkpLnRoZW4obnVsbCwgKCkgPT4gUHJvbWlzZS5yZXNvbHZlKG51bGwpKTtcbiAgfVxuXG4gIHB1dChrZXksIHZhbHVlLCB0dGwpIHtcbiAgICBjb25zdCBjYWNoZUtleSA9IGpvaW5LZXlzKHRoaXMuYXBwSWQsIGtleSk7XG4gICAgcmV0dXJuIHRoaXMuYWRhcHRlci5wdXQoY2FjaGVLZXksIHZhbHVlLCB0dGwpO1xuICB9XG5cbiAgZGVsKGtleSkge1xuICAgIGNvbnN0IGNhY2hlS2V5ID0gam9pbktleXModGhpcy5hcHBJZCwga2V5KTtcbiAgICByZXR1cm4gdGhpcy5hZGFwdGVyLmRlbChjYWNoZUtleSk7XG4gIH1cblxuICBjbGVhcigpIHtcbiAgICByZXR1cm4gdGhpcy5hZGFwdGVyLmNsZWFyKCk7XG4gIH1cblxuICBleHBlY3RlZEFkYXB0ZXJUeXBlKCkge1xuICAgIHJldHVybiBDYWNoZUFkYXB0ZXI7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2FjaGVDb250cm9sbGVyO1xuIl19