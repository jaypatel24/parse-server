'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SessionTokenCache = undefined;

var _node = require('parse/node');

var _node2 = _interopRequireDefault(_node);

var _lruCache = require('lru-cache');

var _lruCache2 = _interopRequireDefault(_lruCache);

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function userForSessionToken(sessionToken) {
  var q = new _node2.default.Query("_Session");
  q.equalTo("sessionToken", sessionToken);
  return q.first({ useMasterKey: true }).then(function (session) {
    if (!session) {
      return _node2.default.Promise.error("No session found for session token");
    }
    return session.get("user");
  });
}

class SessionTokenCache {

  constructor(timeout = 30 * 24 * 60 * 60 * 1000, maxSize = 10000) {
    this.cache = new _lruCache2.default({
      max: maxSize,
      maxAge: timeout
    });
  }

  getUserId(sessionToken) {
    if (!sessionToken) {
      return _node2.default.Promise.error('Empty sessionToken');
    }
    const userId = this.cache.get(sessionToken);
    if (userId) {
      _logger2.default.verbose('Fetch userId %s of sessionToken %s from Cache', userId, sessionToken);
      return _node2.default.Promise.as(userId);
    }
    return userForSessionToken(sessionToken).then(user => {
      _logger2.default.verbose('Fetch userId %s of sessionToken %s from Parse', user.id, sessionToken);
      const userId = user.id;
      this.cache.set(sessionToken, userId);
      return _node2.default.Promise.as(userId);
    }, error => {
      _logger2.default.error('Can not fetch userId for sessionToken %j, error %j', sessionToken, error);
      return _node2.default.Promise.error(error);
    });
  }
}

exports.SessionTokenCache = SessionTokenCache;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9MaXZlUXVlcnkvU2Vzc2lvblRva2VuQ2FjaGUuanMiXSwibmFtZXMiOlsidXNlckZvclNlc3Npb25Ub2tlbiIsInNlc3Npb25Ub2tlbiIsInEiLCJRdWVyeSIsImVxdWFsVG8iLCJmaXJzdCIsInVzZU1hc3RlcktleSIsInRoZW4iLCJzZXNzaW9uIiwiUHJvbWlzZSIsImVycm9yIiwiZ2V0IiwiU2Vzc2lvblRva2VuQ2FjaGUiLCJjb25zdHJ1Y3RvciIsInRpbWVvdXQiLCJtYXhTaXplIiwiY2FjaGUiLCJtYXgiLCJtYXhBZ2UiLCJnZXRVc2VySWQiLCJ1c2VySWQiLCJ2ZXJib3NlIiwiYXMiLCJ1c2VyIiwiaWQiLCJzZXQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVBLFNBQVNBLG1CQUFULENBQTZCQyxZQUE3QixFQUEwQztBQUN4QyxNQUFJQyxJQUFJLElBQUksZUFBTUMsS0FBVixDQUFnQixVQUFoQixDQUFSO0FBQ0FELElBQUVFLE9BQUYsQ0FBVSxjQUFWLEVBQTBCSCxZQUExQjtBQUNBLFNBQU9DLEVBQUVHLEtBQUYsQ0FBUSxFQUFDQyxjQUFhLElBQWQsRUFBUixFQUE2QkMsSUFBN0IsQ0FBa0MsVUFBU0MsT0FBVCxFQUFpQjtBQUN4RCxRQUFHLENBQUNBLE9BQUosRUFBWTtBQUNWLGFBQU8sZUFBTUMsT0FBTixDQUFjQyxLQUFkLENBQW9CLG9DQUFwQixDQUFQO0FBQ0Q7QUFDRCxXQUFPRixRQUFRRyxHQUFSLENBQVksTUFBWixDQUFQO0FBQ0QsR0FMTSxDQUFQO0FBTUQ7O0FBRUQsTUFBTUMsaUJBQU4sQ0FBd0I7O0FBR3RCQyxjQUFZQyxVQUFrQixLQUFLLEVBQUwsR0FBVSxFQUFWLEdBQWUsRUFBZixHQUFvQixJQUFsRCxFQUF3REMsVUFBa0IsS0FBMUUsRUFBaUY7QUFDL0UsU0FBS0MsS0FBTCxHQUFhLHVCQUFRO0FBQ25CQyxXQUFLRixPQURjO0FBRW5CRyxjQUFRSjtBQUZXLEtBQVIsQ0FBYjtBQUlEOztBQUVESyxZQUFVbEIsWUFBVixFQUFxQztBQUNuQyxRQUFJLENBQUNBLFlBQUwsRUFBbUI7QUFDakIsYUFBTyxlQUFNUSxPQUFOLENBQWNDLEtBQWQsQ0FBb0Isb0JBQXBCLENBQVA7QUFDRDtBQUNELFVBQU1VLFNBQVMsS0FBS0osS0FBTCxDQUFXTCxHQUFYLENBQWVWLFlBQWYsQ0FBZjtBQUNBLFFBQUltQixNQUFKLEVBQVk7QUFDVix1QkFBT0MsT0FBUCxDQUFlLCtDQUFmLEVBQWdFRCxNQUFoRSxFQUF3RW5CLFlBQXhFO0FBQ0EsYUFBTyxlQUFNUSxPQUFOLENBQWNhLEVBQWQsQ0FBaUJGLE1BQWpCLENBQVA7QUFDRDtBQUNELFdBQU9wQixvQkFBb0JDLFlBQXBCLEVBQWtDTSxJQUFsQyxDQUF3Q2dCLElBQUQsSUFBVTtBQUN0RCx1QkFBT0YsT0FBUCxDQUFlLCtDQUFmLEVBQWdFRSxLQUFLQyxFQUFyRSxFQUF5RXZCLFlBQXpFO0FBQ0EsWUFBTW1CLFNBQVNHLEtBQUtDLEVBQXBCO0FBQ0EsV0FBS1IsS0FBTCxDQUFXUyxHQUFYLENBQWV4QixZQUFmLEVBQTZCbUIsTUFBN0I7QUFDQSxhQUFPLGVBQU1YLE9BQU4sQ0FBY2EsRUFBZCxDQUFpQkYsTUFBakIsQ0FBUDtBQUNELEtBTE0sRUFLSFYsS0FBRCxJQUFXO0FBQ1osdUJBQU9BLEtBQVAsQ0FBYSxvREFBYixFQUFtRVQsWUFBbkUsRUFBaUZTLEtBQWpGO0FBQ0EsYUFBTyxlQUFNRCxPQUFOLENBQWNDLEtBQWQsQ0FBb0JBLEtBQXBCLENBQVA7QUFDRCxLQVJNLENBQVA7QUFTRDtBQTVCcUI7O1FBZ0N0QkUsaUIsR0FBQUEsaUIiLCJmaWxlIjoiU2Vzc2lvblRva2VuQ2FjaGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUGFyc2UgZnJvbSAncGFyc2Uvbm9kZSc7XG5pbXBvcnQgTFJVIGZyb20gJ2xydS1jYWNoZSc7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4uL2xvZ2dlcic7XG5cbmZ1bmN0aW9uIHVzZXJGb3JTZXNzaW9uVG9rZW4oc2Vzc2lvblRva2VuKXtcbiAgdmFyIHEgPSBuZXcgUGFyc2UuUXVlcnkoXCJfU2Vzc2lvblwiKTtcbiAgcS5lcXVhbFRvKFwic2Vzc2lvblRva2VuXCIsIHNlc3Npb25Ub2tlbik7XG4gIHJldHVybiBxLmZpcnN0KHt1c2VNYXN0ZXJLZXk6dHJ1ZX0pLnRoZW4oZnVuY3Rpb24oc2Vzc2lvbil7XG4gICAgaWYoIXNlc3Npb24pe1xuICAgICAgcmV0dXJuIFBhcnNlLlByb21pc2UuZXJyb3IoXCJObyBzZXNzaW9uIGZvdW5kIGZvciBzZXNzaW9uIHRva2VuXCIpO1xuICAgIH1cbiAgICByZXR1cm4gc2Vzc2lvbi5nZXQoXCJ1c2VyXCIpO1xuICB9KTtcbn1cblxuY2xhc3MgU2Vzc2lvblRva2VuQ2FjaGUge1xuICBjYWNoZTogT2JqZWN0O1xuXG4gIGNvbnN0cnVjdG9yKHRpbWVvdXQ6IG51bWJlciA9IDMwICogMjQgKiA2MCAqIDYwICogMTAwMCwgbWF4U2l6ZTogbnVtYmVyID0gMTAwMDApIHtcbiAgICB0aGlzLmNhY2hlID0gbmV3IExSVSh7XG4gICAgICBtYXg6IG1heFNpemUsXG4gICAgICBtYXhBZ2U6IHRpbWVvdXRcbiAgICB9KTtcbiAgfVxuXG4gIGdldFVzZXJJZChzZXNzaW9uVG9rZW46IHN0cmluZyk6IGFueSB7XG4gICAgaWYgKCFzZXNzaW9uVG9rZW4pIHtcbiAgICAgIHJldHVybiBQYXJzZS5Qcm9taXNlLmVycm9yKCdFbXB0eSBzZXNzaW9uVG9rZW4nKTtcbiAgICB9XG4gICAgY29uc3QgdXNlcklkID0gdGhpcy5jYWNoZS5nZXQoc2Vzc2lvblRva2VuKTtcbiAgICBpZiAodXNlcklkKSB7XG4gICAgICBsb2dnZXIudmVyYm9zZSgnRmV0Y2ggdXNlcklkICVzIG9mIHNlc3Npb25Ub2tlbiAlcyBmcm9tIENhY2hlJywgdXNlcklkLCBzZXNzaW9uVG9rZW4pO1xuICAgICAgcmV0dXJuIFBhcnNlLlByb21pc2UuYXModXNlcklkKTtcbiAgICB9XG4gICAgcmV0dXJuIHVzZXJGb3JTZXNzaW9uVG9rZW4oc2Vzc2lvblRva2VuKS50aGVuKCh1c2VyKSA9PiB7XG4gICAgICBsb2dnZXIudmVyYm9zZSgnRmV0Y2ggdXNlcklkICVzIG9mIHNlc3Npb25Ub2tlbiAlcyBmcm9tIFBhcnNlJywgdXNlci5pZCwgc2Vzc2lvblRva2VuKTtcbiAgICAgIGNvbnN0IHVzZXJJZCA9IHVzZXIuaWQ7XG4gICAgICB0aGlzLmNhY2hlLnNldChzZXNzaW9uVG9rZW4sIHVzZXJJZCk7XG4gICAgICByZXR1cm4gUGFyc2UuUHJvbWlzZS5hcyh1c2VySWQpO1xuICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgbG9nZ2VyLmVycm9yKCdDYW4gbm90IGZldGNoIHVzZXJJZCBmb3Igc2Vzc2lvblRva2VuICVqLCBlcnJvciAlaicsIHNlc3Npb25Ub2tlbiwgZXJyb3IpO1xuICAgICAgcmV0dXJuIFBhcnNlLlByb21pc2UuZXJyb3IoZXJyb3IpO1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCB7XG4gIFNlc3Npb25Ub2tlbkNhY2hlXG59XG4iXX0=